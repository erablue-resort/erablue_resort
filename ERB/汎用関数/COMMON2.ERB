;-------------------------------------------------
;いわゆるROUND関数判定
;ARG <= ARG:1 <= ARG:2ならば1を、そうでなければ0を返す
;-------------------------------------------------
@CHK_FOCUS(ARG, ARG:1, ARG:2)
#FUNCTION
;SIF CALC_FOCUS(ARG, ARG:1, ARG:2) != ARG:1
;	RETURNF 0
;RETURNF 1
SIF INRANGE(ARG:1, ARG:0, ARG:2)
	RETURNF 1
SIF ARG > ARG:2
	PRINT ARG:0 > ARG:2 エラー
RETURNF 0
;-------------------------------------------------
;いわゆるROUND関数出力
;-------------------------------------------------
@CALC_FOCUS(ARG, ARG:1, ARG:2)
#FUNCTION
SIF ARG >= ARG:1
	RETURNF ARG
SIF ARG	:1 >= ARG:2
	RETURNF ARG:2
RETURNF ARG:1 

;-------------------------------------------------
;与えられた要素の0~ARG番目のうち、何番目が最大の数値か返す（同値なら番手が少ないほうが優先）
;-------------------------------------------------
@MAXFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 11
SIF ARG < 0
	RETURNF 0
要素:10 = MAXARRAY(要素)
FOR LOCAL, 0, ARG
	SIF 要素:LOCAL == 要素:10
		BREAK
NEXT
RETURNF LOCAL-1

;-------------------------------------------------
;与えられた要素の0~ARG番目のうちのうち、何番目が最小の数値か返す（同値なら番手が少ないほうが優先）
;-------------------------------------------------
@MINFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 11
SIF ARG < 0
	RETURNF 0
要素:10 = MINARRAY(要素)
FOR LOCAL, 0, ARG
	SIF 要素:LOCAL == 要素:10
		BREAK
NEXT
RETURNF LOCAL-1

;-------------------------------------------------
;ARGが、与えられた数値間のうちどの範囲に入るかを返す
;(10, 1, 3, 100, 5, 15)とかだと先に3～100に反応して1を返す
;-------------------------------------------------
@RANGEFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 10
FOR LOCAL, 0, 9
	SIF INRANGE(ARG, 要素:LOCAL, 要素:(LOCAL+1))
		BREAK
NEXT
RETURNF LOCAL-1

@滞在キャラ数算出関数()
#FUNCTION
;モブ、ネームド観光客、定住者、全部ひっくるめた数の算出

RETURNF モブ観光客数 + 滞在キャラ数

@陥落チェック(ARG)
#FUNCTION
IF TALENT:ARG:恋慕
	RETURNF 1
ELSEIF TALENT:ARG:セフレ
	RETURNF 2
ELSE
	RETURNF 0
ENDIF

@従業員人数チェック()

従業員人数 = 0
FOR LOCAL,1,CHARANUM
	IF TALENT:LOCAL:従業員
		従業員人数 += 1
	ENDIF
NEXT

RETURN 従業員人数


@ドロップ判定処理(ドロップ確率, 入手アイテム名)
#DIM ドロップ確率
#DIMS 入手アイテム名

LOCAL = RAND:100

IF 確定ドロップフラグ
	LOCAL = 0
ENDIF

IF LOCAL < ドロップ確率
	WSTR:(K++) = %入手アイテム名%を手に入れた！
	CALL 素材入手処理(入手アイテム名, 1)
ENDIF


@素材入手処理(入手アイテム名, 入手数 = 1, 累計入手無効フラグ = 0)
#DIMS 入手アイテム名
#DIM 入手数
#DIM 累計入手無効フラグ

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 入手アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	LOCAL:1 = DT_CELL_GET("所持素材データベース", COUNT - 1, "所持数")
	DT_CELL_SET "所持素材データベース", COUNT - 1, "所持数", LOCAL:1 + 入手数
	IF 累計入手無効フラグ == 0
		;無効でない限り、累計入手数を計上
		LOCAL:1 = DT_CELL_GET("所持素材データベース", COUNT - 1, "累計入手数")
		DT_CELL_SET "所持素材データベース", COUNT - 1, "累計入手数", LOCAL:1 + 入手数
	ENDIF
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
	PRINTL
ENDIF

@素材アイテム_数値データ取得(取得データ名, 判定アイテム名)
#FUNCTION
#DIMS 取得データ名
#DIMS 判定アイテム名

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 判定アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	RETURNF DT_CELL_GET("所持素材データベース", COUNT - 1, 取得データ名)
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
ENDIF

@素材アイテム_文字列データ取得(取得データ名, 判定アイテム名)
#FUNCTIONS
#DIMS 取得データ名
#DIMS 判定アイテム名

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 判定アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	RETURNF DT_CELL_GETS("所持素材データベース", COUNT - 1, 取得データ名)
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
ENDIF

;-------------------------------------------------
;時刻をもらって時間(hour)の文字列を返す式中関数
;IS_HALFが0の場合, 0時間以上9時間以下の場合は全角, 10時間以上の場合は半角で返す
;IS_HALFが非0の場合, 半角で返す
;例: CONVERT_HOURS(599) = ９, CONVERT_HOURS(600) = 10
;-------------------------------------------------
@CONVERT_HOURS(MINITES, IS_HALF = 0)
#FUNCTIONS
#DIM MINITES
#DIM IS_HALF
#DIM HOURS
HOURS = MINITES/60
RETURNF ((0 <= HOURS && HOURS <= 9) || IS_HALF) ? TOFULL(TOSTR(HOURS)) # TOSTR(HOURS)

;-------------------------------------------------
;ARG番のキャラに男性器があるかどうかを返す関数
;-------------------------------------------------
@HAS_PENIS(ARG)
#FUNCTION
RETURNF GETBIT(TALENT:ARG:性別, 1)

;-------------------------------------------------
;ARG番のキャラに女性器があるかどうかを返す関数
;-------------------------------------------------
@HAS_VAGINA(ARG)
#FUNCTION
RETURNF GETBIT(TALENT:ARG:性別, 0)

;-------------------------------------------------
;ARG番のキャラがベースとして男扱いなら1を返す関数
;-------------------------------------------------
@IS_MALE(ARG)
#FUNCTION
RETURNF GETBIT(TALENT:ARG:性別, 1)

;-------------------------------------------------
;ARG番のキャラがベースとして女扱いなら1を返す関数
;-------------------------------------------------
@IS_FEMALE(ARG)
#FUNCTION
RETURNF !IS_MALE(ARG:0)

;-------------------------------------------------
;部位をARG番のキャラの感度と敏感で重み付けてランダムに返す関数
;現状では使いづらいので部位_Ｓは返さない
;IS_MALE(ARG)の時は部位_Ｖと部位_Ｂは返さない
;Ｖ,Ａ未経験の時はそれぞれ部位_Ｖと部位_Ａは返さない
;-------------------------------------------------
@RANDOM_PART(ARG)
#FUNCTION
#DIM 部位嗜好, 4
#DIM 総和
#DIM 選好

FOR LOCAL, 0, 4
	部位嗜好:LOCAL = MAX(0, ABL:ARG:LOCAL + TALENT:ARG:(LOCAL + 部位感度))
	総和 += 部位嗜好:LOCAL
NEXT

$CHECK

IF IS_MALE(ARG)
	総和 -= 部位嗜好:部位_Ｖ + 部位嗜好:部位_Ｂ
	部位嗜好:部位_Ｖ = 0
	部位嗜好:部位_Ｂ = 0
ENDIF
IF !EXP:ARG:Ｖ経験
	総和 -= 部位嗜好:部位_Ｖ
	部位嗜好:部位_Ｖ = 0
ENDIF
IF !EXP:ARG:Ａ経験
	総和 -= 部位嗜好:部位_Ａ
	部位嗜好:部位_Ａ = 0
ENDIF

IF 総和 == 0
	FOR LOCAL, 0, 4
		部位嗜好:LOCAL = 1
		総和 += 1
	NEXT
	GOTO CHECK
ENDIF

選好 = RAND(総和) + 1
FOR LOCAL, 0, 4
	SIF 選好 >= 総和
		RETURNF LOCAL
	総和 -= 部位嗜好:LOCAL
NEXT
