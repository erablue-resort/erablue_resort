

;-------------------------------------------------------------------------------------------
;ロードの後に実行される一連の処理
;主にキャラのCSVが前回プレイから新たに増えた時など
;-------------------------------------------------------------------------------------------

@SYSTEM_LOADEND
#DIM 部屋セットチェック
#DIM 追加キャラ保存, 1000
#DIM L_C
#DIM F_NUM
#DIM 追加前キャラ数保存
#DIM CSV番号

#DIMS 比較用一時保存配列, 1000
#DIMS 素材名分割用, 2
#DIMS 同行キャラ文字列一時保存
#DIMS CSTR切り分け文字列格納, 2
VARSET 比較用一時保存配列
VARSET 同時モード_選択キャラ, -1

VARSET 追加キャラ保存
LOCAL:1 = 0

ダンジョン表示モード = 


;------------------------------------------------------------------
;処理順の関係でちょっとここにいれる、Ver0.045にしたとき消す
FOR LOCAL, 0, CHARANUM
	IF NAME:LOCAL == "[ポケモン博士]オーキド・ユキナリ"
		NO:LOCAL = 1070
		LOCAL:1 ++
		IF LOCAL:1 > 1
			DELCHARA LOCAL
			BREAK
		ENDIF
	ENDIF
	IF NAME:LOCAL == "[Der kleine Rückschläger]未来"
		NAME:LOCAL = "[Der-kleine-Rückschläger]未来"
	ENDIF
	IF NAME:LOCAL == "[camminatore del buio]雅緋"
		NAME:LOCAL = "[camminatore-del-buio]雅緋"
	ENDIF
NEXT
LOCAL:1 = 0
;ここまで
;------------------------------------------------------------------


;CSVが存在しない場合のフォロー
FOR LOCAL, 0, CHARANUM
	SIF LOCAL >= CHARANUM
		BREAK
	IF !EXISTCSV(NO:LOCAL)
		FOR CSV番号, 1, キャラクタ数上限
			SIF !EXISTCSV(CSV番号)
				CONTINUE
			SIF CSV番号 == 999
				CONTINUE
			IF NAME:LOCAL == CSVNAME(CSV番号)
				;全く同じ名前のCSVがある場合
				IF GETCHARA(CSV番号) >= 0
					;流れとしては「CSVが存在しないキャラが先にいて、後からCSVのNOが変更されて
					;変更された後のNOのキャラが追加された」のはずなのでこっちを削除する
					DELCHARA GETCHARA(CSV番号)
					;対象のNOの変身セットを削除する
					CALL 変身セット削除(LOCAL)
				ENDIF
				NO:LOCAL = CSV番号
				BREAK
			ENDIF
		NEXT
		IF !EXISTCSV(NO:LOCAL)
			;ここまでCSVがないなら起動させない
			THROW %NAME:LOCAL%のCSVが存在しません。ゲームを終了します。
		ENDIF
	ENDIF
NEXT

追加前キャラ数保存 = CHARANUM

;CSVを全部読んでキャラがADDってなければADDる
得意武器フォロー_非適用番号 = 0
FOR LOCAL, 1, キャラクタ数上限
	SIF !EXISTCSV(LOCAL)
		CONTINUE
	SIF LOCAL == 999
		CONTINUE
	SIF GETCHARA(LOCAL) >= 0
		CONTINUE
	ADDCHARA LOCAL
	CALL ADD_PERSON_FROM_CHARA(CHARANUM - 1)
	CALL 変身セット登録(CHARANUM - 1)

	;------------------------------------------------------------------
	;VerUPのためのフォロー処理
	SIF 得意武器フォロー_非適用番号 == 0
		得意武器フォロー_非適用番号 = CHARANUM - 1
	;Ver0.046にしたとき消す
	;------------------------------------------------------------------

NEXT

SIF 追加前キャラ数保存 != CHARANUM
	CALL コマンド存在チェック

FOR LOCAL, 追加前キャラ数保存, CHARANUM
	CALL キャラクター初期化(LOCAL)
NEXT


;ロード時処理
FOR LOCAL, 0, CHARANUM
	;初期加入状態なら加入させる
	SIF (CFLAG:LOCAL:招待不可フラグ == 1 || CFLAG:LOCAL:招待不可フラグ == 3) && GETBIT(OPTION変数:キャラ制限初期, 0)
		CFLAG:LOCAL:招待不可フラグ = 0
	SIF CFLAG:LOCAL:招待不可フラグ == 2 && GETBIT(OPTION変数:キャラ制限初期, 1)
		CFLAG:LOCAL:招待不可フラグ = 0

	TRYCALLFORM 口上側LOADENDパラメータ変更_{NO:LOCAL}
	SIF !BASE:LOCAL:身長
		CALL INIT_BODYSIZE(LOCAL)
	IF !RELATION_VAL:0:0 && LOCAL < 追加前キャラ数保存
		CALL INIT_RELATION(LOCAL)
	ENDIF

	;追加同行キャラチェック
	同行キャラ文字列一時保存 = %CSVCSTR(NO:LOCAL, GETNUM(CSTR, "同行キャラ"))%
	VARSET LOCALS
	REPLACE 同行キャラ文字列一時保存, " ", ""
	SPLIT RESULTS, "%", LOCALS
	LOCAL:2 = RESULT - 1
	FOR LOCAL:10, 0, LOCAL:2
		VARSET CSTR切り分け文字列格納
		SPLIT LOCALS:(LOCAL:10), "_", CSTR切り分け文字列格納
		CALL SET_RELATION(LOCAL, FINDCHARA(NAME, CSTR切り分け文字列格納:0), TOINT(CSTR切り分け文字列格納:1))
	NEXT

	;固有ステータスチェック
	IF EXISTFUNCTION(@"戦闘初期ステータス設定_{NO:LOCAL}")
		;固有ステがあるのにステタイプが汎用なら修正
		IF 基礎BATTLE_STATE:LOCAL:ステータスタイプ保存 > -1
			CALLFORM 戦闘初期ステータス設定_{NO:LOCAL}(LOCAL)
			CALL レベルアップ処理(LOCAL, 1)
			CALL 口上変数初期化
		ENDIF
	ENDIF

	MAXBASE:LOCAL:警戒 = 1001
NEXT

SIF !RELATION_VAL:0:0
	RELATION_VAL:0:0 = 1
CALL 戦闘用データベースセット
CALL 従業員業務用マップセット
CALL 体位モードデータベースセット

ボタン化用カラーマトリクス:0:0 = 768,256,256,  0,  0
ボタン化用カラーマトリクス:1:0 = 256,768,256,  0,  0
ボタン化用カラーマトリクス:2:0 = 256,256,256,  0,  0
ボタン化用カラーマトリクス:3:0 =   0,  0,  0,256,  0
ボタン化用カラーマトリクス:4:0 =   0,  0,  0,  0,256

;初期所持服登録
LOCAL:1 = ENUMFUNCBEGINSWITH("CLOTHES_初期所持関数_")
IF LOCAL:1 > 0
	FOR LOCAL, 0, LOCAL:1
		CALLFORM %RESULTS:LOCAL%
	NEXT
ENDIF

;------------------------------------------------------------------------------------------
;旧セーブとの互換のために入れる処理
;------------------------------------------------------------------------------------------

;追加TALENT、追加CSTRのチェック
FOR LOCAL, 0, CHARANUM
	FOR LOCAL:1, GAMEBASE_ALLOWVERSION, GAMEBASE_VERSION + 1
		CALLFORM VERUP_{LOCAL:1}_CHARA(LOCAL)
	NEXT
NEXT

FOR LOCAL:1, GAMEBASE_ALLOWVERSION, GAMEBASE_VERSION + 1
	;その他広域変数の書き換えなど
	CALLFORM VERUP_{LOCAL:1}()
	;対応処理用フラグを対応済状態にセット
	CALLFORM VERUP_{LOCAL:1}_FINISH()
NEXT

;変身セットがないときは作る
SIF !DT_EXIST("変身データベース")
	CALL 変身データベースセット
;------------------------------------------------------------------------------------------
;ここまで互換のための処理
;------------------------------------------------------------------------------------------

CALL コマンド存在チェック()

;あなたの弱点チェック
FOR LOCAL:1, 0, 50
	;今現在設定されてない弱点枠には触らない
	SIF 弱点コマンド枠:MASTER:(LOCAL:1) == ""
		BREAK
	IF EXISTFUNCTION(@"COMTYPE_S_%弱点コマンド枠:MASTER:(LOCAL:1)%")
		SIF 弱点コマンド候補判定(MASTER, @"COMTYPE_S_%弱点コマンド枠:MASTER:(LOCAL:1)%") == 0
			弱点コマンド枠:MASTER:(LOCAL:1) = 
	ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点コマンド枠:MASTER:(LOCAL:1)%")
		SIF 弱点コマンド候補判定(MASTER, @"COMTYPE_%弱点コマンド枠:MASTER:(LOCAL:1)%") == 0
			弱点コマンド枠:MASTER:(LOCAL:1) = 
	ELSE
		弱点コマンド枠:MASTER:(LOCAL:1) = 
	ENDIF
	;上を通って空っぽならランダムに入れ込む
	IF 弱点コマンド枠:MASTER:(LOCAL:1) == ""
		RESULTS = 
		CALL 弱点コマンドランダム選出(MASTER)
		弱点コマンド枠:MASTER:(LOCAL:1) = %RESULTS%
	ENDIF
NEXT

FOR LOCAL, 1, CHARANUM
	;キャラ体力再計算
	CALL 体力変動素質適用処理(LOCAL)

	;弱点コマンドの設定がされているかどうかチェック
	CALL 弱点妥当性チェック(LOCAL)

	;画像フォルダが有効かチェック
	CALL 画像フォルダ有効チェック(LOCAL)

	;定住者が帰ってないかチェック
	SIF TALENT:LOCAL:定住者 && CFLAG:LOCAL:滞在期間 != 999
		CFLAG:LOCAL:滞在期間 = 999

	SIF CFLAG:LOCAL:滞在期間 < 0
		CONTINUE
	CALL 部屋なしキャラチェック(LOCAL)

	;この段階でデートは入らないはずなのでリセット
	CFLAG:LOCAL:デート = 0

	;複数の部屋に入っちゃってないかチェック
	LOCAL:2 = 0
	IF TALENT:LOCAL:定住者 == 0
		IF TALENT:LOCAL:従業員
			FOR LOCAL:1, 0, 従業員部屋数
				IF 従業員部屋割り配列:(LOCAL:1) == LOCAL
					IF LOCAL:2
						従業員部屋割り配列:(LOCAL:1) = 0
					ELSE
						LOCAL:2 = 1
					ENDIF
				ENDIF
			NEXT
		ELSE
			FOR LOCAL:1, 0, 100
				IF 滞在者部屋割り配列:(LOCAL:1) == LOCAL
					IF LOCAL:2
						滞在者部屋割り配列:(LOCAL:1) = 0
					ELSE
						LOCAL:2 = 1
					ENDIF
				ENDIF
			NEXT
		ENDIF
	ENDIF
NEXT

;分身が入り込んでないかチェック
FOR LOCAL:1, 0, 従業員部屋数
	IF TALENT:(従業員部屋割り配列:(LOCAL:1)):従業員 < 1
		従業員部屋割り配列:(LOCAL:1) = 0
	ENDIF
	IF 従業員部屋割り配列:(LOCAL:1) >= CHARANUM
		従業員部屋割り配列:(LOCAL:1) = 0
	ENDIF
	IF 滞在者部屋割り配列:(LOCAL:1) >= CHARANUM
		滞在者部屋割り配列:(LOCAL:1) = 0
	ENDIF
NEXT

;ちゃんとPTメンバー全員いるかチェック
FOR LOCAL, 0, 14
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	IF CFLAG:(BATTLE_STATE:LOCAL:キャラ登録番号):滞在期間 < 0
		BATTLE_STATE:LOCAL:キャラ登録番号 = BATTLE_STATE:(LOCAL + 1):キャラ登録番号
		BATTLE_STATE:(LOCAL + 1):キャラ登録番号 = BATTLE_STATE:(LOCAL + 2):キャラ登録番号
		BATTLE_STATE:(LOCAL + 2):キャラ登録番号 = BATTLE_STATE:(LOCAL + 3):キャラ登録番号
		BATTLE_STATE:(LOCAL + 3):キャラ登録番号 = BATTLE_STATE:(LOCAL + 4):キャラ登録番号
	ENDIF
NEXT

CALL イベント追加チェック
CALL イベント削除チェック
IF SAVESTR:ゲームフェイズ管理 == ""
	CALL イベント発生条件チェック
ENDIF

;新しく素材アイテムが増えてないかチェック
CALL 素材アイテム登録処理

;念のため変数リセット
CALL TRAIN_VAR_RESET
CALL TURN_RESET
CALL 最大レベル算出保存

;ログボ処理
LOCAL = GETSECOND() / 3600
;日単位
LOCAL:1 = (LOCAL + 19) / 24

IF (REAL_TIME < LOCAL:1)
	REAL_TIME = LOCAL:1
	CALL ログインボーナス処理
ENDIF


@弱点妥当性チェック(対象キャラ)
#DIM 対象キャラ
#DIMS 弱点一時保存, 50
#DIM 弱点番号

VARSET 弱点一時保存
IF EXISTFUNCTION(@"弱点コマンド変更_{NO:対象キャラ}")
	FOR 弱点番号, 0, 50
		弱点一時保存:弱点番号 = %弱点コマンド枠:対象キャラ:弱点番号%
	NEXT
	VARSET 弱点コマンド枠:対象キャラ:0
	TRYCALLFORM 弱点コマンド変更_{NO:対象キャラ}
	FOR 弱点番号, 0, 50
		IF 弱点コマンド枠:対象キャラ:弱点番号 == "-1" || 弱点コマンド枠:対象キャラ:弱点番号 == ""
			;口上で指定されてないのを入れ込む場合、有効な弱点かどうか見る
			IF EXISTFUNCTION(@"COMTYPE_S_%弱点一時保存:弱点番号%")
				SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_S_%弱点一時保存:弱点番号%")
					弱点コマンド枠:対象キャラ:弱点番号 = %弱点一時保存:弱点番号%
			ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点一時保存:弱点番号%")
				SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_%弱点一時保存:弱点番号%")
					弱点コマンド枠:対象キャラ:弱点番号 = %弱点一時保存:弱点番号%
			ELSE
				弱点コマンド枠:対象キャラ:弱点番号 = 
			ENDIF
			;上を通って空っぽ、あるいはランダム指定ならランダムに入れ込む
			IF 弱点コマンド枠:対象キャラ:弱点番号 == "-1" || (弱点コマンド枠:対象キャラ:弱点番号 == "" && 弱点番号 <= 5)
				RESULTS = 
				CALL 弱点コマンドランダム選出(対象キャラ)
				弱点コマンド枠:対象キャラ:弱点番号 = %RESULTS%
			ENDIF
		ENDIF
	NEXT
ELSE
	;弱点の口上設定がない場合、有効な弱点かどうかだけ見る
	FOR 弱点番号, 0, 50
		;今現在設定されてない弱点枠には触らない
		SIF 弱点コマンド枠:対象キャラ:弱点番号 == ""
			BREAK
		IF EXISTFUNCTION(@"COMTYPE_S_%弱点コマンド枠:対象キャラ:弱点番号%")
			SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_S_%弱点コマンド枠:対象キャラ:弱点番号%") == 0
				弱点コマンド枠:対象キャラ:弱点番号 = 
		ELSEIF EXISTFUNCTION(@"COMTYPE_%弱点コマンド枠:対象キャラ:弱点番号%")
			SIF 弱点コマンド候補判定(対象キャラ, @"COMTYPE_%弱点コマンド枠:対象キャラ:弱点番号%") == 0
				弱点コマンド枠:対象キャラ:弱点番号 = 
		ELSE
			弱点コマンド枠:対象キャラ:弱点番号 = 
		ENDIF
		;上を通って空っぽならランダムに入れ込む
		IF 弱点コマンド枠:対象キャラ:弱点番号 == ""
			RESULTS = 
			CALL 弱点コマンドランダム選出(対象キャラ)
			弱点コマンド枠:対象キャラ:弱点番号 = %RESULTS%
		ENDIF
	NEXT
ENDIF


