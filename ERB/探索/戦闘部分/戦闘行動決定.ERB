
@行動内容入力
#DIM バフ・デバフ番号
#DIM 改行フラグ
#DIM 表示不可フラグ
#DIM 表示アビ数
#DIM アビ番号
#DIM 消費ＭＰ
#DIM 行動キャラ一時保存

VARSET LOCALS
上メニュー操作許可フラグ = 1
CALL 画面再描画
CALL 口上変数初期化

エネミー画像ボタン化フラグ = 1
キャラ画像ボタン化フラグ = 1

CALL 奥義名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
表示不可フラグ = RESULT
;表示不可フラグが０なら表示、１なら非表示、－１ならグレーアウトして表示（選択不可）
IF デバフ番号取得("奥義封印", 戦闘行動キャラ) >= 0 || 表示不可フラグ == -1
	KSTR:(K++) = <button value = '100'>[100] 通常攻撃</button>　　　<font color='#%カラーパレット_HTML("グレーアウト")%'>[101] 奥義：%TSTR:コマンド名受渡%</font>
ELSEIF 表示不可フラグ == 0
	KSTR:(K++) = <button value = '100'>[100] 通常攻撃</button>　　　<button value = '101'>[101] 奥義：%TSTR:コマンド名受渡%</button>
ELSE
	KSTR:(K++) = <button value = '100'>[100] 通常攻撃</button>
ENDIF

;変身があればアビリティの位置を一個後ろにずらして配置
CALL 変身アビリティ
IF RESULT
	LOCAL:1 = 1
ELSE
	LOCAL:1 = 0
ENDIF

VARSET RESULTS
VARSET アビ関数名保存
;LOCAL:1 = 0
表示アビ数 = ENUMFUNCBEGINSWITH(@"固有アビ_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}_")
IF 表示アビ数 == 0
	VARSET RESULTS
	表示アビ数 = ENUMFUNCBEGINSWITH("汎用固有アビ_")
ENDIF

FOR アビ番号, 0, 表示アビ数
	TSTR:コマンド名受渡 = 
	アビテンプレート用_アビ封印用フラグ = 0
	CALLFORM %RESULTS:アビ番号%("アビ名", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
	CALLFORM %RESULTS:アビ番号%(@"アビ説明文", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
	消費ＭＰ = RESULT
	IF TSTR:コマンド名受渡 != ""
		IF デバフ番号取得("アビリティ封印", 戦闘行動キャラ) >= 0 || アビテンプレート用_アビ封印用フラグ || 消費ＭＰ > BATTLE_STATE:戦闘行動キャラ:ＭＰ
			IF アビ使用確認スキップフラグ == 0
				NSTR:(K++) = <font color='#%カラーパレット_HTML("グレーアウト")%'><button value = '{110 + アビ番号}'>[{110 + アビ番号}] %TSTR:コマンド名受渡, 24, LEFT%</button></font>
			ELSE
				NSTR:(K++) = <font color='#%カラーパレット_HTML("グレーアウト")%'>[{110 + アビ番号}] %TSTR:コマンド名受渡, 24, LEFT%</font>
			ENDIF
		ELSE
			NSTR:(K++) = <button value = '{110 + アビ番号}'>[{110 + アビ番号}] %TSTR:コマンド名受渡, 24, LEFT%</button>
		ENDIF
		アビ関数名保存:アビ番号 = %RESULTS:アビ番号%
		LOCAL:1 += 1
		IF LOCAL:1 % 3 == 0
			NSTR:(K++) = <br>
		ENDIF
	ENDIF
NEXT
IF LOCAL:1 % 3 != 0
	NSTR:(K++) = <br>
ENDIF

IF 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備証番号 < 1
	;証装備なし
ELSE
	VARSET 証アビ関数名保存
	VARSET RESULTS
	LOCAL:1 = 0
	表示アビ数 = ENUMFUNCBEGINSWITH(@"証アビ関数_%DT_CELL_GETS("所持ジョブ証データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備証番号, "ジョブ証名", 1)%_")
	FOR LOCAL, 0, 表示アビ数
		TSTR:コマンド名受渡 = 
		アビテンプレート用_アビ封印用フラグ = 0
		CALLFORM %RESULTS:LOCAL%(@"アビ名", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		CALLFORM %RESULTS:LOCAL%(@"アビ説明文", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		消費ＭＰ = RESULT
		IF TSTR:コマンド名受渡 != ""
			IF アビテンプレート用_アビ封印用フラグ || 消費ＭＰ > BATTLE_STATE:戦闘行動キャラ:ＭＰ
				IF アビ使用確認スキップフラグ == 0
					NSTR:(K++) = <font color='#%カラーパレット_HTML("グレーアウト")%'><button value = '{120 + LOCAL}'>[{120 + LOCAL}] %TSTR:コマンド名受渡, 24, LEFT%</button></font>
				ELSE
					NSTR:(K++) = <font color='#%カラーパレット_HTML("グレーアウト")%'>[{120 + LOCAL}] %TSTR:コマンド名受渡, 24, LEFT%</font>
				ENDIF
			ELSE
				NSTR:(K++) = <button value = '{120 + LOCAL}'>[{120 + LOCAL}] %TSTR:コマンド名受渡, 24, LEFT%</button>
			ENDIF
			証アビ関数名保存:LOCAL = %RESULTS:LOCAL%
			LOCAL:1 += 1
			IF LOCAL:1 % 3 == 0
				NSTR:(K++) = <br>
			ENDIF
		ENDIF
	NEXT
ENDIF

; FOR LOCAL:1, 0, 6
; 	LOCALS:10 += LOCALS:(LOCAL:1)
; 	LOCALS:10 += "<br>"
; NEXT
; TSTR:メッセージ欄文字列受け渡し_下側 = <div rect='{左顔グラあり},4312,5662,1687'>%LOCALS:10%</div>

; CALL 画面再描画

CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔", @"%CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%",,0,1)

クイック行動フラグ_TARGET = 0
BINPUTS
IF STRCOUNT(RESULTS, "サイド領域") > 0
	CALL サイド領域_実行処理_戦闘中
	RESTART
ENDIF
戦闘行動内容 = TOINT(RESULTS)

SELECTCASE 戦闘行動内容
	CASE 0 TO 19
		;キャラクター状態表示
		DRAWLINE
		IF 戦闘行動内容 < 10
			PRINTFORML ■%CALLNAME:(BATTLE_STATE:戦闘行動内容:キャラ登録番号)%
		ELSE
			;クイック行動状態だと行動内容を切り替えてreturn
			IF クイック行動フラグ
				クイック行動フラグ_TARGET = 戦闘行動内容
				戦闘行動内容 = 100
				エネミー画像ボタン化フラグ = 0
				キャラ画像ボタン化フラグ = 0
				上メニュー操作許可フラグ = 0
				RETURN 0
			ENDIF
			PRINTFORML ■%敵BATTLE_STATE_STR:(戦闘行動内容 - 10):エネミー名%
		ENDIF
		PRINTL ＜バフ＞
		FOR バフ・デバフ番号, 0, DT_ROW_LENGTH(@"バフデータベース_{戦闘行動内容}")
			IF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "特殊表示オプション") == -1
				CONTINUE
			ELSEIF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "特殊表示オプション") == 1
				CALLFORM バフ・デバフ特殊表示_%DT_CELL_GETS(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ枠")%(戦闘行動内容, バフ・デバフ番号)
				PRINTL ----
			ELSE
				CALL バフ汎用表示(戦闘行動内容, バフ・デバフ番号)
				PRINTL ----
			ENDIF
		NEXT
		PRINTL
		PRINTL ＜デバフ＞
		FOR バフ・デバフ番号, 0, DT_ROW_LENGTH(@"デバフデータベース_{戦闘行動内容}")
			IF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "特殊表示オプション") == -1
				CONTINUE
			ELSEIF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "特殊表示オプション") == 1
				CALLFORM バフ・デバフ特殊表示_%DT_CELL_GETS(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ枠")%(戦闘行動内容, バフ・デバフ番号)
				PRINTL ----
			ELSE
				CALL デバフ汎用表示(戦闘行動内容, バフ・デバフ番号)
				PRINTL ----
			ENDIF
		NEXT
		PRINTL
		DRAWLINE
		WAIT
		RESTART
	CASE 1000
		;アイテム使用
		IF アイテム使用済みフラグ > 0
			REUSELASTLINE 
			RESTART
		ENDIF
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		ダンジョン表示モード = アイテム画面
		CALL 口上変数初期化
		$INPUT_LOOP_ITEM
		CALL アビテンプレ変数リセット
		CALL 画面再描画
		BINPUTS
		IF STRCOUNT(RESULTS, "サイド領域") > 0
			CALL サイド領域_実行処理_戦闘中
			GOTO INPUT_LOOP_ITEM
		ENDIF
		LOCAL = TOINT(RESULTS)
		行動キャラ一時保存 = 戦闘行動キャラ
		戦闘行動キャラ = 9
		SELECTCASE LOCAL
			CASE 1 TO 24
				IF DT_CELL_GET("所持アイテムデータベース", 0, 表示アイテム名:LOCAL)
					選択用変数 = LOCAL
					$INPUT_LOOP_ITEM2
					CALL 画面再描画
					SIF ダンジョン表示モード != "戦闘画面"
						BINPUT
					LOCAL = RESULT
					IF LOCAL == 999
						ダンジョン表示モード = アイテム画面
						キャラ画像ボタン化フラグ = 1
						CLEARLINE 1
						選択用変数 = -1
						戦闘行動キャラ = 行動キャラ一時保存
						GOTO INPUT_LOOP_ITEM
					ENDIF
					アビ汎用文字列:実行時メッセージ１ = %CALLNAME:PLAYER%は%表示アイテム名:選択用変数%を使った！
					TRYCCALLFORM アイテム効果処理_%表示アイテム名:選択用変数%(LOCAL)
						IF RESULT == 0
							REUSELASTLINE 
							GOTO INPUT_LOOP_ITEM2
						ELSEIF RESULT == -1
							ダンジョン表示モード = アイテム画面
							キャラ画像ボタン化フラグ = 1
							CLEARLINE 1
							選択用変数 = -1
							戦闘行動キャラ = 行動キャラ一時保存
							GOTO INPUT_LOOP_ITEM
						ENDIF
						CALL アイテム増減汎用処理(表示アイテム名:選択用変数, -1)
						CALL アビテンプレート用_表示メッセージ変換処理()
						CALL メッセージ欄表示用関数(,,,0)
						CALL アイテム使用済みフラグチェック処理()
					CATCH
						REUSELASTLINE 
						GOTO INPUT_LOOP_ITEM2
					ENDCATCH
				ENDIF
			CASE 999
			CASEELSE
				戦闘行動キャラ = 行動キャラ一時保存
				REUSELASTLINE 
				GOTO INPUT_LOOP_ITEM
		ENDSELECT
		戦闘行動キャラ = 行動キャラ一時保存
		ダンジョン表示モード = 戦闘画面
		選択用変数 = -1
		CALL アビテンプレ変数リセット
		CALL 画面再描画
		IF アビテンプレート用_味方全滅フラグ || アビテンプレート用_敵全滅フラグ
			RETURN 0
		ENDIF
		RESTART
	CASE 1001
		;逃げる
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		CALL 口上変数初期化
		KSTR:(K++) = 戦闘から逃げます。よろしいですか？
		KSTR:(K++) = <button value='0'>[0]はい</button>
		KSTR:(K++) = <button value='1'>[1]いいえ</button>
		CALL メッセージ欄表示用関数(,,,0,1)
		$INPUT_LOOP_ESCAPE
		BINPUTS
		IF STRCOUNT(RESULTS, "サイド領域") > 0
			CALL サイド領域_実行処理_戦闘中
			CALL 画面再描画
			GOTO INPUT_LOOP_ESCAPE
		ENDIF
		LOCAL = TOINT(RESULTS)
		SELECTCASE LOCAL
			CASE 0
				CALL 口上変数初期化
				CALL 戦闘終了時処理
				KSTR:(K++) = %CALLNAME:PLAYER%は戦闘から逃げ出した…
				CALL メッセージ欄表示用関数()
				キャラ画像ボタン化フラグ = 1
				RETURN -2
			CASE 1
				CALL 口上変数初期化
				CALL 画面再描画
				RESTART
			CASEELSE
				REUSELASTLINE 
				GOTO INPUT_LOOP_ESCAPE
		ENDSELECT
	CASE 1002
		INVERTBIT アビ使用確認スキップフラグ, 0
		CALL 画面再描画
		RESTART
	CASE 1003
		INVERTBIT 奥義使用確認スキップフラグ, 0
		CALL 画面再描画
		RESTART
	CASE 1004
		INVERTBIT クイック行動フラグ, 0
		CALL 画面再描画
		RESTART
	CASE 1005
		SELECTCASE カットイン演出一括表示フラグ
			CASE 1
				カットイン演出一括表示フラグ = 2
			CASE 2
				カットイン演出一括表示フラグ = 0
			CASEELSE
				カットイン演出一括表示フラグ = 1
			ENDSELECT
		CALL 画面再描画
		RESTART
	CASE 1010
		;フィールド情報表示
		DRAWLINE
		TRYCALLFORM フィールド説明文_%展開中フィールド名格納%
		HTML_PRINT 詳細文文字列受け渡し変数
		WAIT
		RESTART
	CASE 2000
		;兵装使用
		戦闘行動キャラ_一時保存 = 戦闘行動キャラ
		戦闘行動キャラ = 9
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		上メニュー操作許可フラグ = 0
	CASE 100 TO 101
		;通常攻撃or奥義
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		上メニュー操作許可フラグ = 0
	CASE 110 TO 129
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		上メニュー操作許可フラグ = 0
	CASE 200
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		上メニュー操作許可フラグ = 0
	CASEELSE
		REUSELASTLINE 
		RESTART
ENDSELECT


@戦闘行動実処理関数
#DIM 証番号
#DIM バフ番号
#DIM データベース行数
#DIM 奥義威力保存
#DIM 消費ゲージ
#DIM 消費前ゲージ
#DIM 追撃数
#DIM 総ダメージ
#DIM 追撃ダメージ
#DIMS 効果種類
#DIM 追撃効果量, 10
#DIM 追撃効果割合, 10
#DIM 確認スキップ
#DIM 先頭得意武器
#DIMS 説明保存

CALL アビテンプレ変数リセット
CALL 口上変数初期化
口上用技名保存 = 
詳細文文字列受け渡し変数 = 

SELECTCASE 戦闘行動内容
	CASE 100
		;通常攻撃
		口上用技名保存 = 通常攻撃
		TRYCCALLFORM 固有通常攻撃_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}
		CATCH
			IF クイック行動フラグ_TARGET >= 10
				CALL アビ対象選択テンプレート_指定(クイック行動フラグ_TARGET)
			ELSE
				アビ汎用文字列:選択時メッセージ１ = 誰を攻撃しますか？
				CALL アビ対象選択テンプレート_敵単体
			ENDIF
			アビテンプレート用_アビ名 = 攻撃
			アビ汎用変数:効果割合 = 100
			CALL アビテンプレート_通常攻撃処理
		ENDCATCH
		IF アビテンプレート用_キャンセルフラグ
			アビテンプレート用_キャンセルフラグ = 0
			RETURN -1
		ELSE
			CALL アビテンプレート用_表示メッセージ変換処理
		ENDIF
	CASE 101
		;奥義
		CALL 奥義名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		消費ゲージ = アビ汎用変数:消費奥義ゲージ量
		口上用技名保存 = %TSTR:コマンド名受渡%
		アビテンプレート用_アビ名 = 奥義：%TSTR:コマンド名受渡%
		CALL 奥義威力呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		奥義威力保存 = RESULT
		説明保存 = %詳細文文字列受け渡し変数%
		;最後が改行だった場合、それは消しとく
		IF STRFIND(説明保存, "<br>", STRLENS(説明保存) - 4) > -1
			説明保存 = %SUBSTRING(説明保存, 0, STRLENS(説明保存) - 4)%
		ENDIF
		KSTR:(K++) = ■%口上用技名保存%　　%説明保存%
		;改行の数をカウントし、必要数を改行して戻るボタンを表示行の最後に入れ込む
		STRCOUNT 説明保存, "<br>"
		IF RESULT < 4
			FOR LOCAL, 0, 4 - RESULT
				KSTR:(K++) = 　
			NEXT
		ENDIF
;		IF 奥義使用確認スキップフラグ == 0 || 奥義威力保存 < 1
		;奥義使用確認ON、または威力0の奥義の場合使用確認が挟まる
		確認スキップ = !(奥義使用確認スキップフラグ == 0 || 奥義威力保存 < 1)
		エネミー画像ボタン化フラグ = 確認スキップ
		KSTR:(K++) = \@ 確認スキップ? 攻撃対象を選んで下さい# <button value='0'>[0]使用する</button>\@　　　　　<button value='999'>[999]戻る</button>
		詳細文文字列受け渡し変数 = 
		TRYCCALLFORM 固有奥義_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}("奥義説明文_詳細", (BATTLE_STATE:戦闘行動キャラ:キャラ登録番号))
		CATCH
			FOR LOCAL, 0, 10
				IF GETBIT(基礎BATTLE_STATE:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):得意武器, LOCAL)
					先頭得意武器 = LOCAL
					BREAK
				ENDIF
			NEXT
			TRYCALLFORM 汎用奥義_%得意武器数値文字列変換(先頭得意武器)%("奥義説明文_詳細", (BATTLE_STATE:戦闘行動キャラ:キャラ登録番号))
		ENDCATCH
		IF 詳細文文字列受け渡し変数 != ""
			KSTR:(K - 1) += "　　　　　<button value='998'>[998]詳細を見る</button>"
		ENDIF
		CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔",,,0,1)
		行動口上呼び出し用文字列 = KOJO_DUNGEON_奥義発動時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}
		IF 確認スキップ
			CALL 口上変数初期化
			GOTO 直接選択_奥義
		ENDIF
		$INPUT_LOOP_奥義
		BINPUTS
		IF STRCOUNT(RESULTS, "サイド領域") > 0
			CALL サイド領域_実行処理_戦闘中
			CALL 画面再描画
			GOTO INPUT_LOOP_奥義
		ENDIF
		RESULT = TOINT(RESULTS)
		SELECTCASE RESULT
			CASE 0
				;使用する場合は下の処理へ移行
				CALL 口上変数初期化
			CASE 998
				DRAWLINE
				HTML_PRINT @"■%アビテンプレート用_アビ名%<br><br>%詳細文文字列受け渡し変数%"
				DRAWLINE
				WAIT
				CALL 画面再描画
				GOTO INPUT_LOOP_奥義
			CASE 999
				RETURN -1
			CASEELSE
				REUSELASTLINE 
				GOTO INPUT_LOOP_奥義
		ENDSELECT
;			行動口上呼び出し用文字列 = KOJO_DUNGEON_奥義発動時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}
			;奥義威力０の時はダメージ無し奥義として攻撃部分はスキップ
			IF 奥義威力保存 > 0
				IF アビ汎用文字列:選択時メッセージ１ == ""
					アビ汎用文字列:選択時メッセージ１ = 誰を攻撃しますか？
				ENDIF
				;奥義仕様先登録のため、ダメージ種類設定
				$直接選択_奥義
				アビ汎用文字列:ダメージ種類 = 奥義ダメージ
				CALL アビ対象選択テンプレート_敵単体(確認スキップ)
				IF アビテンプレート用_キャンセルフラグ
					アビテンプレート用_キャンセルフラグ = 0
					RETURN -1
				ENDIF

				奥義対象指定先 = アビテンプレート用_対象保存:0

				CALL 奥義前効果呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
				アビ汎用変数:効果割合 = 奥義威力保存
				アビ汎用文字列:ダメージ種類 = 奥義ダメージ
				CALL アビテンプレート_ダメージ処理_自属性
			ENDIF
		;奥義ゲージ増加の追加効果に備えてここでゲージを減らす
		消費前ゲージ = BATTLE_STATE:戦闘行動キャラ:奥義ゲージ
		BATTLE_STATE:戦闘行動キャラ:奥義ゲージ = MAX(0, BATTLE_STATE:戦闘行動キャラ:奥義ゲージ - 消費ゲージ)


		CALL 奥義追加効果呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		IF アビテンプレート用_キャンセルフラグ
			アビテンプレート用_キャンセルフラグ = 0
			;キャンセル時に奥義ゲージを戻す
			BATTLE_STATE:戦闘行動キャラ:奥義ゲージ = 消費前ゲージ
			RETURN -1
		ELSE
			CALL 奥義後処理関数
			CALL アビテンプレート用_表示メッセージ変換処理
			戦闘中カウント:戦闘行動キャラ:奥義回数 += 1
			チェンバ基準キャラ保存:ターン中奥義回数保存 = 戦闘行動キャラ
			ターン中奥義回数保存 += 1
		ENDIF
		
		;再発動処理
		データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
		FOR LOCAL:1, 0, データベース行数
			効果種類 = %DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", LOCAL:1, "バフ対象能力")%
			IF 効果種類 == "奥義再発動"
				CALL メッセージ欄表示用関数(,,,0)
				
				CALL 奥義名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
				消費ゲージ = アビ汎用変数:消費奥義ゲージ量
				口上用技名保存 = %TSTR:コマンド名受渡%
				アビテンプレート用_アビ名 = 奥義：%TSTR:コマンド名受渡%
				CALL 奥義威力呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
				奥義威力保存 = RESULT
				行動口上呼び出し用文字列 = KOJO_DUNGEON_奥義発動時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}
				;奥義威力０の時はダメージ無し奥義として攻撃部分はスキップ
				CALL 口上変数初期化
				IF 奥義威力保存 > 0
					;奥義仕様先登録のため、ダメージ種類設定
					アビ汎用文字列:ダメージ種類 = 奥義ダメージ
					CALL アビ対象選択テンプレート_指定(奥義対象指定先)
					IF アビテンプレート用_キャンセルフラグ
						アビテンプレート用_キャンセルフラグ = 0
						RETURN -1
					ENDIF

					CALL 奥義前効果呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
					アビ汎用変数:効果割合 = 奥義威力保存
					アビ汎用文字列:ダメージ種類 = 奥義ダメージ
					CALL アビテンプレート_ダメージ処理_自属性
				ENDIF
				;再発動時はゲージ減らさない

				CALL 奥義追加効果呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
				CALL 奥義後処理関数
				CALL アビテンプレート用_表示メッセージ変換処理
				戦闘中カウント:戦闘行動キャラ:奥義回数 += 1
				チェンバ基準キャラ保存:ターン中奥義回数保存 = 戦闘行動キャラ
				ターン中奥義回数保存 += 1
				
				CALL バフ回数経過処理(戦闘行動キャラ, "奥義再発動")
			ENDIF
		NEXT
		
	CASE 110 TO 119
		CALL 口上変数初期化
		アビテンプレート用_アビ封印用フラグ = 0
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ名", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		アビテンプレート用_アビ名 = %TSTR:コマンド名受渡%
		口上用技名保存 = %TSTR:コマンド名受渡%
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ説明文", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		説明保存 = %詳細文文字列受け渡し変数%
		消費MP一時保存 = RESULT
		IF アビ使用確認スキップフラグ == 0
			KSTR:(K++) = ■%TSTR:コマンド名受渡%
			KSTR:(K++) = %説明保存%
			;改行の数をカウントし、必要数を改行して戻るボタンを表示行の最後に入れ込む
			STRCOUNT 説明保存, "<br>"
			IF RESULT < 4
				FOR LOCAL, 0, 4 - RESULT
					KSTR:(K++) = 　
				NEXT
			ENDIF
			IF アビテンプレート用_アビ封印用フラグ
				KSTR:(K++) = <nonbutton>使用できません</nonbutton> 　　　<button value='999'>[999]戻る</button>
			ELSEIF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = <nonbutton>ＭＰが足りません</nonbutton> 　　<button value='999'>[999]戻る</button>
			ELSE
				KSTR:(K++) = <button value='0'>[0]使用する</button>　　　　　<button value='999'>[999]戻る</button>
			ENDIF
			詳細文文字列受け渡し変数 = 
			CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ説明文_詳細", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
			IF 詳細文文字列受け渡し変数 != ""
				KSTR:(K - 1) += "　　　　　<button value='998'>[998]詳細を見る</button>"
			ENDIF
			CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔",,,0,1)
			$INPUT_LOOP2
			BINPUTS
			IF STRCOUNT(RESULTS, "サイド領域") > 0
				CALL サイド領域_実行処理_戦闘中
				CALL 画面再描画
				GOTO INPUT_LOOP2
			ENDIF
			RESULT = TOINT(RESULTS)
			SELECTCASE RESULT
				CASE 0
					IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
						REUSELASTLINE 
						GOTO INPUT_LOOP2
					ENDIF
					CALL 口上変数初期化
				CASE 998
					DRAWLINE
					HTML_PRINT @"■%アビテンプレート用_アビ名%<br><br>%詳細文文字列受け渡し変数%"
					DRAWLINE
					WAIT
					CALL 画面再描画
					GOTO INPUT_LOOP2
				CASE 999
					RETURN -1
				CASEELSE
					REUSELASTLINE 
					GOTO INPUT_LOOP2
			ENDSELECT
		ELSE
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = ＭＰが足りません。
				CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔")
				RETURN -1
			ENDIF
		ENDIF
		CALL 口上変数初期化
		行動口上呼び出し用文字列 = KOJO_DUNGEON_固有アビ発動時_%REPLACE(アビ関数名保存:(戦闘行動内容 - 110), "固有アビ_", "")%
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ効果", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		IF アビテンプレート用_キャンセルフラグ
			アビテンプレート用_キャンセルフラグ = 0
			RETURN -1
		ELSE
			;MP消費
			;TRYCALLFORM KOJO_DUNGEON_固有アビ発動時_%口上用アビ関数キー保存%(口上用技名保存)
			BATTLE_STATE:戦闘行動キャラ:ＭＰ -= 消費MP一時保存
			CALL アビテンプレート用_表示メッセージ変換処理
		ENDIF
	CASE 120 TO 129
		CALL 口上変数初期化
		VARSET RESULTS
		CALLFORM %証アビ関数名保存:(戦闘行動内容 - 120)%(@"アビ名", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		アビテンプレート用_アビ名 = %TSTR:コマンド名受渡%
		口上用技名保存 = %TSTR:コマンド名受渡%
		;ここに来てる時点で存在しないアビが選ばれてことは無いはずなので例外規定は作らない
		証番号 = 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備証番号
		;消費MP算出
		RESULT = 0
		CALLFORM %証アビ関数名保存:(戦闘行動内容 - 120)%(@"アビ説明文", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		説明保存 = %詳細文文字列受け渡し変数%
		消費MP一時保存 = RESULT
		IF アビ使用確認スキップフラグ == 0
			KSTR:(K++) = %説明保存%
			;改行の数をカウントし、必要数を改行して戻るボタンを表示行の最後に入れ込む
			STRCOUNT 説明保存, "<br>"
			IF RESULT < 4
				FOR LOCAL, 0, 4 - RESULT
					KSTR:(K++) = 　
				NEXT
			ENDIF
			IF アビテンプレート用_アビ封印用フラグ
				KSTR:(K++) = <nonbutton>使用できません</nonbutton> 　　　<button value='999'>[999]戻る</button>
			ELSEIF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = <nonbutton>ＭＰが足りません</nonbutton> 　　<button value='999'>[999]戻る</button>
			ELSE
				KSTR:(K++) = <button value='0'>[0]使用する</button>　　　　　<button value='999'>[999]戻る</button>
			ENDIF
			詳細文文字列受け渡し変数 = 
			CALLFORM %証アビ関数名保存:(戦闘行動内容 - 120)%(@"アビ説明文_詳細", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
			IF 詳細文文字列受け渡し変数 != ""
				KSTR:(K - 1) += "　　　　　<button value='998'>[998]詳細を見る</button>"
			ENDIF
			CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔",,,0,1)
			$INPUT_LOOP3
			BINPUTS
			IF STRCOUNT(RESULTS, "サイド領域") > 0
				CALL サイド領域_実行処理_戦闘中
				CALL 画面再描画
				GOTO INPUT_LOOP3
			ENDIF
			RESULT = TOINT(RESULTS)
			SELECTCASE RESULT
				CASE 0
					IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
						REUSELASTLINE 
						GOTO INPUT_LOOP3
					ENDIF
				CASE 998
					DRAWLINE
					HTML_PRINT @"■%アビテンプレート用_アビ名%<br><br>%詳細文文字列受け渡し変数%"
					DRAWLINE
					WAIT
					CALL 画面再描画
					GOTO INPUT_LOOP3
				CASE 999
					RETURN -1
				CASEELSE
					REUSELASTLINE 
					GOTO INPUT_LOOP3
			ENDSELECT
		ELSE
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = ＭＰが足りません。
				CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔")
				RETURN -1
			ENDIF
		ENDIF
		CALL 口上変数初期化
		CALLFORM %証アビ関数名保存:(戦闘行動内容 - 120)%(@"アビ効果", BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
		IF アビテンプレート用_キャンセルフラグ
			アビテンプレート用_キャンセルフラグ = 0
			RETURN -1
		ELSE
			;MP消費
			BATTLE_STATE:戦闘行動キャラ:ＭＰ -= 消費MP一時保存
			CALL アビテンプレート用_表示メッセージ変換処理
		ENDIF
	CASE 200
		CALL 変身アビリティ使用実処理
		口上用技名保存 = 
		口上用トドメフラグ = 0
		RETURN 0 
	CASE 2000
		;兵装使用部分の処理は完全に切り離す
		CALL 乗機兵装使用実処理
		口上用技名保存 = 
		口上用トドメフラグ = 0
		RETURN 0 
ENDSELECT

CALL メッセージ欄表示用関数(,,,0)
CALL 行動済みフラグチェック処理(戦闘行動キャラ)

IF 口上用トドメフラグ
	TRYCALLFORM KOJO_DUNGEON_トドメ時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
ENDIF
口上用技名保存 = 
口上用トドメフラグ = 0


@敵戦闘行動実処理関数
#DIM 攻撃対象, 10
VARSET LOCAL
VARSET 攻撃対象
IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大チャージターン > 0
	CALL バフ・デバフ測定(戦闘行動キャラ, "最大ＣＴ増加")
	IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):チャージターン >= 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大チャージターン + RESULT
		TRYCCALLFORM 敵チャージ行動_%敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー関数キー%
			敵BATTLE_STATE:(戦闘行動キャラ - 10):チャージターン = 0
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 行動済みフラグチェック処理(戦闘行動キャラ)
			RETURN 0
		CATCH
		ENDCATCH
	ENDIF
ENDIF

;通常攻撃
RESULT = 0
TRYCALLFORM 敵トリガー行動_%敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー関数キー%
;何か動いたなら１が返る、何も動いてないなら通常攻撃をさせる
IF RESULT == 0
	CALL アビ対象選択テンプレート_味方ランダムＸ体(1)
	アビテンプレート用_アビ名 = 攻撃
	アビ汎用変数:効果割合 = 100
	CALL アビテンプレート_通常攻撃処理
ENDIF

CALL アビテンプレート用_表示メッセージ変換処理
CALL メッセージ欄表示用関数(,,,0)
CALL 行動済みフラグチェック処理(戦闘行動キャラ)

口上用技名保存 = 
口上用トドメフラグ = 0

@行動済みフラグチェック処理(チェック対象キャラ隊列)
#DIM チェック対象キャラ隊列
#DIM フラグ値一時保存
#DIM バフ番号
#DIM 行動回数

;行動消費無しの場合は何もしない
SIF アビテンプレート用_行動消費無しフラグ
	RETURN

IF チェック対象キャラ隊列 < 10
	;味方側
	フラグ値一時保存 = BATTLE_STATE:チェック対象キャラ隊列:行動済みフラグ
ELSE
	;敵側
	フラグ値一時保存 = 敵BATTLE_STATE:(チェック対象キャラ隊列 - 10):行動済みフラグ
ENDIF

SELECTCASE フラグ値一時保存
	CASE IS > 0
		;行動済の場合は何もしない
		RETURN
	CASE 0
		;再行動バフチェック
		バフ番号 = バフ番号取得("再行動", チェック対象キャラ隊列)
		IF バフ番号 >= 0
			;再行動する場合、フラグを再行動回数✕-1に
			フラグ値一時保存 = MIN(-1, -1 * DT_CELL_GET(@"バフデータベース_{チェック対象キャラ隊列}", バフ番号, "バフ効果量_固定値"))
			;回数消費
			CALL バフ回数経過処理(チェック対象キャラ隊列, "再行動")
		ELSE
			;再行動が無い場合、行動済に
			フラグ値一時保存 = 1
		ENDIF
	CASE -1
		フラグ値一時保存 = 1
	CASE IS < -1
		フラグ値一時保存 += 1
ENDSELECT

IF チェック対象キャラ隊列 < 10
	;味方側
	BATTLE_STATE:チェック対象キャラ隊列:行動済みフラグ = フラグ値一時保存
ELSE
	;敵側
	敵BATTLE_STATE:(チェック対象キャラ隊列 - 10):行動済みフラグ = フラグ値一時保存
ENDIF


@アイテム使用済みフラグチェック処理()
#DIM フラグ値一時保存
#DIM バフ番号
#DIM 行動回数

SELECTCASE アイテム使用済みフラグ
	CASE IS > 0
		;使用済の場合は何もしない
	CASE -1, 0
		;使用済に
		アイテム使用済みフラグ = 1
	CASE IS < -1
		;フラグ値が使用回数✕-1になっているので、1増やす
		アイテム使用済みフラグ += 1
ENDSELECT


@ダメージ計算処理(攻撃威力変数, 攻撃側使用能力値 = "攻撃力", 防御側使用能力値 = "防御力", 乱数幅 = 5)
#DIM 攻撃威力変数
#DIM 防御数値
#DIM 攻撃数値
#DIM クリ率数値
#DIM クリダメ数値
#DIM 乱数幅
#DIM 対象属性
#DIM 行動者属性
#DIM 属性補正フラグ
#DIM 属性強化変数
#DIM 属性耐性変数
#DIM キャラ番
#DIM 一時計算
#DIMS 攻撃側使用能力値
#DIMS 防御側使用能力値
VARSET LOCAL
VARSET LOCALS

IF 攻撃側使用能力値 == ""
	攻撃側使用能力値 = 攻撃力
ENDIF
IF 防御側使用能力値 == ""
	防御側使用能力値 = 防御力
ENDIF

CALL バフ・デバフ測定(戦闘行動キャラ, 攻撃側使用能力値)
攻撃数値 = RESULT * 攻撃威力変数 / 100
CALL バフ・デバフ測定(戦闘行動対象, 防御側使用能力値)
防御数値 = RESULT
IF 乱数幅 < 0
	乱数幅 = 5
ENDIF

IF 戦闘行動対象 < 10
	対象属性 = BATTLE_STATE:戦闘行動対象:属性
ELSEIF 戦闘行動対象 >= 10
	対象属性 = 敵BATTLE_STATE:(戦闘行動対象 - 10):属性
ENDIF
IF 戦闘行動キャラ < 10
	;味方側処理
	行動者属性 = BATTLE_STATE:戦闘行動キャラ:属性
	属性補正フラグ = 属性有利不利(行動者属性, 対象属性, "味方側")
ELSEIF 戦闘行動キャラ >= 10
	;敵側処理
	行動者属性 = 敵BATTLE_STATE:(戦闘行動キャラ - 10):属性
	属性補正フラグ = 属性有利不利(行動者属性, 対象属性,  "敵側")
ENDIF
CALL バフ・デバフ測定(戦闘行動キャラ, @"%属性数値文字列変換(行動者属性)%強化")
属性強化変数 = RESULT
CALL バフ・デバフ測定(戦闘行動キャラ, "全強化")
属性強化変数 += RESULT
CALL バフ・デバフ測定(戦闘行動対象, @"%属性数値文字列変換(行動者属性)%耐性")
属性耐性変数 = RESULT
CALL バフ・デバフ測定(戦闘行動対象, "全耐性")
属性耐性変数 += RESULT

;乱数幅は、「算出数値から上下に{乱数幅}％の範囲でランダムに変化させる」数値
;基本は５％を想定。ムラが大きい攻撃は大きく、ムラが小さい攻撃は小さくすること

;基礎ダメージ計算
IF アビ汎用変数:防御無視オプション_割合 || アビ汎用変数:防御無視オプション_固定値
	防御数値 = 防御数値 * (100 - アビ汎用変数:防御無視オプション_割合) / 100
	防御数値 = MAX(0, 防御数値 - アビ汎用変数:防御無視オプション_固定値)
ENDIF

;属性補正
IF 属性補正フラグ == 1
	一時計算 = 攻撃数値 * 13 / 10
ELSEIF 属性補正フラグ == -1
	一時計算 = 攻撃数値 * 7 / 10
ELSE
	一時計算 = 攻撃数値
ENDIF

;耳飾り一致時上書き
IF 戦闘行動キャラ < 10
	キャラ番 = BATTLE_STATE:戦闘行動キャラ:キャラ登録番号
	IF 装備ステータス補正保存:キャラ番:属性 - 10 == 基礎BATTLE_STATE:キャラ番:属性
		IF 属性補正フラグ == 1
			;耳飾り属性一致判定
			一時計算 = 攻撃数値 * 14 / 10
		ELSEIF 属性補正フラグ == -1
			一時計算 = 攻撃数値 * 75 / 100
		ELSE
			一時計算 = 攻撃数値 * 105 / 100
		ENDIF
	ENDIF
ENDIF

攻撃数値 = 一時計算
LOCAL = (攻撃数値 / 2) - (防御数値 / 4)

;クリティカル補正
;クリティカルフラグが999の時は強制的にクリティカル
SIF アビ汎用変数:クリティカルフラグ != 999 && アビ汎用変数:クリティカルフラグ != -999
	アビ汎用変数:クリティカルフラグ = 0
IF 属性補正フラグ == 1
	IF アビ汎用変数:クリティカル率計算値保存 == -1
		CALL バフ・デバフ測定(戦闘行動キャラ, "クリティカル率")
		アビ汎用変数:クリティカル率計算値保存 = RESULT
	ENDIF
	クリ率数値 = アビ汎用変数:クリティカル率計算値保存 + アビ汎用変数:クリティカル率補正値
	IF アビ汎用変数:クリティカルフラグ == 999 || (アビ汎用変数:クリティカルフラグ != -999 && RAND:100 < クリ率数値)
		IF アビ汎用変数:クリティカルダメージ計算値保存 == -1
			CALL バフ・デバフ測定(戦闘行動キャラ, "クリティカルダメージ率")
			アビ汎用変数:クリティカルダメージ計算値保存 = RESULT
		ENDIF
		クリダメ数値 = アビ汎用変数:クリティカルダメージ計算値保存 + アビ汎用変数:クリティカルダメージ補正値
		LOCAL = MAX(LOCAL * クリダメ数値 / 100, 攻撃数値 / 3)
		SIF アビ汎用変数:クリティカルフラグ == 0
			アビ汎用変数:クリティカルフラグ = 1
	ENDIF
ENDIF
LOCAL = LOCAL * (100 + 属性強化変数) / (100 + 属性耐性変数)

;与ダメージ
CALL バフ・デバフ測定(戦闘行動キャラ, "与ダメージ", LOCAL)
LOCAL = RESULT

;被ダメージ
CALL バフ・デバフ測定(戦闘行動対象, "被ダメージ", LOCAL)
LOCAL = RESULT

;乱数処理
LOCAL:1 = RAND:(乱数幅 * 2 + 1) - 乱数幅
LOCAL = LOCAL * (100 + LOCAL:1) / 100
;最低保障１
IF 攻撃威力変数 > 0
	LOCAL = MAX(LOCAL, 1)
ELSE
	LOCAL = 0
ENDIF

RETURN LOCAL



@ダメージ上限計算(隊列番号)
#FUNCTION
#DIM 隊列番号

;将来的にはキャラを見て上限突破要素などを盛り込むが、現在は固定

RETURNF 9999







@回復量計算処理(回復威力変数, 回復側使用能力値 = "回復力", 乱数幅 = 5)
#DIM 回復威力変数
#DIMS 回復側使用能力値
#DIM 回復数値
#DIM 乱数幅
;乱数幅は、「算出数値から上下に{乱数幅}％の範囲でランダムに変化させる」数値
;基本は５％を想定。ムラが大きい攻撃は大きく、ムラが小さい攻撃は小さくすること
VARSET LOCAL

IF 回復側使用能力値 == ""
	回復側使用能力値 = 回復力
ENDIF
IF 乱数幅 < 0
	乱数幅 = 5
ENDIF

CALL バフ・デバフ測定(戦闘行動キャラ, 回復側使用能力値)
回復数値 = RESULT * 回復威力変数 / 100

;基礎ダメージ計算
LOCAL = 回復数値

;乱数処理
LOCAL:1 = RAND:(乱数幅 * 2 + 1) - 乱数幅
LOCAL = LOCAL * (100 + LOCAL:1) / 100
;最低保障１
IF 回復威力変数 > 0
	LOCAL = MAX(LOCAL, 1)
ELSE
	LOCAL = 0
ENDIF

RETURN LOCAL

@戦闘不能者登録(戦闘不能者, 実行キャラ)
#DIM 戦闘不能者
#DIM 実行キャラ
#DIM 配列番号

IF MATCH(戦闘不能反応者, 戦闘不能者) < 1
	FOR 配列番号, 0, 20
		IF 戦闘不能反応者:配列番号 < 0
			戦闘不能反応者:配列番号 = 戦闘不能者
			戦闘不能反応対象:配列番号 = 実行キャラ
			BREAK
		ENDIF
	NEXT
ENDIF

@回避判定チェック(行動キャラ = -1, 対象キャラ = -1, 命中率補正 = 0, 回避率補正 = 0)
#DIM 行動キャラ
#DIM 対象キャラ
#DIM 命中率補正
#DIM 回避率補正
#DIM 命中率計算値
#DIM 回避率計算値

IF 行動キャラ == -1
	行動キャラ = 戦闘行動キャラ
ENDIF
IF 対象キャラ == -1
	対象キャラ = 戦闘行動対象
ENDIF

CALL バフ・デバフ測定(行動キャラ, "命中率")
命中率計算値 = RESULT + 命中率補正

CALL バフ・デバフ測定(対象キャラ, "回避率")
回避率計算値 = RESULT + 回避率補正

IF RAND:100 < 命中率計算値 - 回避率計算値
	;命中時
	RETURN 0
ELSE
	;回避時
	RETURN 1
ENDIF


@反応行動処理関数
#DIM 行動キャラ一時保存
#DIM 生存チェック_味方
#DIM 生存チェック_敵

CALL 口上変数初期化()

;行動後などに特殊反応をまとめて動かす
行動キャラ一時保存 = 戦闘行動キャラ

;被タゲ・回避・被ダメは連鎖させないため特殊反応フラグを立てておく
特殊反応フラグ = 1
CALL 被タゲ時効果処理()
CALL 回避時効果処理()
CALL 被ダメージ時効果処理()
特殊反応フラグ = 0

;戦闘不能は連鎖するためそのまま呼ぶ
CALL 戦闘不能時処理()

;最後に全部消す
CALL 反応系変数リセット()

戦闘行動キャラ = 行動キャラ一時保存

;全滅チェック
FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	生存チェック_味方 = 1
NEXT

IF 生存チェック_味方 == 0
	RETURN 1
ENDIF

FOR LOCAL, 0, 10
	SIF 敵BATTLE_STATE_STR:LOCAL:エネミー名 == ""
		CONTINUE
	SIF 敵BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	生存チェック_敵 = 1
NEXT

IF 生存チェック_敵 == 0
	RETURN 1
ENDIF

RETURN 0




@被ダメージ時効果処理
#DIM バフ番号
#DIM 反撃威力
#DIM 反撃威力_固定値
#DIM データベース行数
#DIM ゲージ上昇量

CALL 口上変数初期化()

;被ダメ者を全部見てチェック
FOR LOCAL, 0, 20
	SIF 被ダメ反応者:LOCAL < 0
		CONTINUE
	;死んでたらダメ
	IF 被ダメ反応者:LOCAL < 10
		SIF BATTLE_STATE:(被ダメ反応者:LOCAL):ＨＰ < 1
			CONTINUE
	ELSE
		SIF 敵BATTLE_STATE:(被ダメ反応者:LOCAL - 10):ＨＰ < 1
			CONTINUE
	ENDIF
	戦闘行動キャラ = 被ダメ反応者:LOCAL
	戦闘行動対象 = 被ダメ反応対象:LOCAL

	;被ダメ時回数消費
	CALL バフ被ダメ回数経過処理(戦闘行動キャラ)
	CALL デバフ被ダメ回数経過処理(戦闘行動キャラ)

	;被ダメ奥義ゲージ上昇
	IF 戦闘行動キャラ < 10
		ゲージ上昇量 = RAND(3,7)
		CALL バフ・デバフ測定(戦闘行動キャラ, "ゲージ上昇効率")
		ゲージ上昇量 = ゲージ上昇量 * RESULT / 100
		CALL バフ・デバフ測定(戦闘行動キャラ, "ゲージ上昇効率_被ダメ時")
		ゲージ上昇量 = ゲージ上昇量 * RESULT / 100
		BATTLE_STATE:戦闘行動キャラ:奥義ゲージ = MIN(BATTLE_STATE:戦闘行動キャラ:奥義ゲージ + ゲージ上昇量, BATTLE_STATE:戦闘行動キャラ:ゲージ最大値)
	ENDIF

	;カウンターバフ時
	バフ番号 = バフ番号取得("カウンター", 戦闘行動キャラ)
	IF バフ番号 > -1
		;反撃ダメージ取得
		反撃威力 = DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_割合")
		反撃威力_固定値 = DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_固定値")

		;攻撃処理
		CALL アビテンプレ変数リセット
		CALL アビ対象選択テンプレート_指定(戦闘行動対象)
		アビテンプレート用_アビ名 = カウンター

		アビ汎用変数:効果割合 = 反撃威力
		アビ汎用変数:効果量 = 反撃威力_固定値
		CALL アビテンプレート_ダメージ処理_自属性
		;回数消費
		CALL バフ回数経過処理(戦闘行動キャラ, "カウンター")
		CALL アビテンプレート用_表示メッセージ変換処理
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
	ENDIF

	;被ダメ特殊バフ時
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
	FOR バフ番号, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ対象能力") == "特殊反応_被ダメ時"
			CALL アビテンプレ変数リセット
			アビテンプレート用_アビ名 = %DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%効果
			TRYCALLFORM 特殊反応_被ダメ時_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%(バフ番号, 戦闘行動対象, 被ダメ反応回数:LOCAL)
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
		ENDIF
	NEXT
	;回数消費
	CALL バフ回数経過処理(戦闘行動キャラ, "特殊反応_被ダメ時")

	;固有処理
	CALL 被ダメ時固有処理関数
NEXT


@回避時効果処理
#DIM バフ番号
#DIM 反撃威力
#DIM 反撃威力_固定値
#DIM データベース行数

CALL 口上変数初期化()

;回避者を全部見てチェック
FOR LOCAL, 0, 20
	SIF 回避反応者:LOCAL < 0
		CONTINUE
	;死んでたらダメ
	IF 回避反応者:LOCAL < 10
		SIF BATTLE_STATE:(回避反応者:LOCAL):ＨＰ < 1
			CONTINUE
	ELSE
		SIF 敵BATTLE_STATE:(回避反応者:LOCAL - 10):ＨＰ < 1
			CONTINUE
	ENDIF
	戦闘行動キャラ = 回避反応者:LOCAL
	戦闘行動対象 = 回避反応対象:LOCAL

	;回避反撃バフ時
	バフ番号 = バフ番号取得("回避反撃", 戦闘行動キャラ)
	IF バフ番号 > -1
		;反撃ダメージ取得
		反撃威力 = DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_割合")
		反撃威力_固定値 = DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_固定値")

		;攻撃処理
		CALL アビテンプレ変数リセット
		CALL アビ対象選択テンプレート_指定(戦闘行動対象)
		アビテンプレート用_アビ名 = 回避反撃

		アビ汎用変数:効果割合 = 反撃威力
		アビ汎用変数:効果量 = 反撃威力_固定値
		CALL アビテンプレート_ダメージ処理_自属性
		;回数消費
		CALL バフ回数経過処理(戦闘行動キャラ, "回避反撃")
		CALL アビテンプレート用_表示メッセージ変換処理
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
	ENDIF

	;回避特殊バフ時
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
	FOR バフ番号, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ対象能力") == "特殊反応_回避時"
			CALL アビテンプレ変数リセット
			アビテンプレート用_アビ名 = %DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%効果
			TRYCALLFORM 特殊反応_回避時_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%(バフ番号, 戦闘行動対象, 回避反応回数:LOCAL)
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
		ENDIF
	NEXT
	;回数消費
	CALL バフ回数経過処理(戦闘行動キャラ, "特殊反応_回避時")

	;固有処理
	CALL 回避時固有処理関数
NEXT


@被タゲ時効果処理
#DIM バフ番号
#DIM データベース行数

CALL 口上変数初期化()

;被タゲ者を全部見てチェック
FOR LOCAL, 0, 20
	SIF 被タゲ反応者:LOCAL < 0
		CONTINUE
	;死んでたらダメ
	IF 被タゲ反応者:LOCAL < 10
		SIF BATTLE_STATE:(被タゲ反応者:LOCAL):ＨＰ < 1
			CONTINUE
	ELSE
		SIF 敵BATTLE_STATE:(被タゲ反応者:LOCAL - 10):ＨＰ < 1
			CONTINUE
	ENDIF
	戦闘行動キャラ = 被タゲ反応者:LOCAL
	戦闘行動対象 = 被タゲ反応対象:LOCAL

	;被タゲ特殊バフ時
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
	FOR バフ番号, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ対象能力") == "特殊反応_被タゲ時"
			CALL アビテンプレ変数リセット
			アビテンプレート用_アビ名 = %DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%効果
			TRYCALLFORM 特殊反応_被タゲ時_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%(バフ番号, 戦闘行動対象, 被タゲ反応回数:LOCAL)
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
		ENDIF
	NEXT
	;回数消費
	CALL バフ回数経過処理(戦闘行動キャラ, "特殊反応_被タゲ時")

	;固有処理
	CALL 被タゲ時固有処理関数
NEXT


@戦闘不能時処理()
#DIM バフ番号
#DIM データベース行数
#DIMS 文字列一時保存
#DIM 隊列番号
#DIM 対象番号
#DIM 戦闘不能反応者_実行配列, 20
#DIM 戦闘不能反応対象_実行配列, 20

CALL 口上変数初期化()

VARSET 戦闘不能反応者_実行配列, -1
VARSET 戦闘不能反応対象_実行配列, -1

FOR LOCAL, 0, 20
	SIF 戦闘不能反応者:LOCAL < 0
		CONTINUE
NEXT
ARRAYCOPY "戦闘不能反応者", "戦闘不能反応者_実行配列"
ARRAYCOPY "戦闘不能反応対象", "戦闘不能反応対象_実行配列"

VARSET 戦闘不能反応者, -1
VARSET 戦闘不能反応対象, -1

;戦闘不能者を全部見てチェック
FOR LOCAL, 0, 20
	SIF 戦闘不能反応者_実行配列:LOCAL < 0
		CONTINUE

	戦闘行動キャラ = 戦闘不能反応者_実行配列:LOCAL
	戦闘行動対象 = 戦闘不能反応対象_実行配列:LOCAL

	;被タゲ特殊バフ時
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
	FOR バフ番号, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ対象能力") == "特殊反応_戦闘不能時"
			CALL アビテンプレ変数リセット
			アビテンプレート用_アビ名 = %DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%効果
			TRYCALLFORM 特殊反応_戦闘不能時_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%(バフ番号, 戦闘行動対象)
			CALL アビテンプレート用_表示メッセージ変換処理
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
		ENDIF
	NEXT
	;回数消費
	CALL バフ回数経過処理(戦闘行動キャラ, "特殊反応_戦闘不能時")

	バフ番号 = バフ番号取得("自動復活", 戦闘行動キャラ)
	IF バフ番号 > -1
		CALL アビテンプレ変数リセット
		;復活
		IF 戦闘行動キャラ < 10
			LOCAL = (BATTLE_STATE:戦闘行動キャラ:最大ＨＰ * DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_割合") / 100) + DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_固定値")
			BATTLE_STATE:戦闘行動キャラ:ＨＰ = MIN(BATTLE_STATE:戦闘行動キャラ:最大ＨＰ, LOCAL)
			文字列一時保存 = %戦闘キャラ名前取得(戦闘行動キャラ)%のＨＰが{BATTLE_STATE:戦闘行動キャラ:ＨＰ}回復した！
		ELSE
			LOCAL = (敵BATTLE_STATE:(戦闘行動キャラ - 10):最大ＨＰ * DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_割合") / 100) + DT_CELL_GET(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ効果量_固定値")
			敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ = MIN(敵BATTLE_STATE:(戦闘行動キャラ - 10):最大ＨＰ, LOCAL)
			文字列一時保存 = %戦闘キャラ名前取得(戦闘行動キャラ)%のＨＰが{敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ}回復した！
		ENDIF
		WSTR:(K++) = %戦闘キャラ名前取得(戦闘行動キャラ)%は%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ名")%の効果で復活した！
		WSTR:(K++) = %文字列一時保存%
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		;回数消費
		CALL バフ回数経過処理(戦闘行動キャラ, "自動復活")
	ENDIF

	;固有処理
	CALL 戦闘不能時固有処理関数()
NEXT

IF 戦闘不能反応者_実行配列:0 > -1
	;もし戦闘不能反応効果で新たな戦闘不能者が出てた場合はもっかい最初から
	RESTART
ENDIF

;この時点で死んでるキャラのバフ・デバフをリセット
FOR 隊列番号, 0, 20
	IF 隊列番号 < 10
		IF BATTLE_STATE:隊列番号:ＨＰ < 1
			DT_CLEAR @"バフデータベース_{隊列番号}"
			DT_CLEAR @"デバフデータベース_{隊列番号}"
		ENDIF
	ELSE
		IF 敵BATTLE_STATE:(隊列番号 - 10):ＨＰ < 1
			DT_CLEAR @"バフデータベース_{隊列番号}"
			DT_CLEAR @"デバフデータベース_{隊列番号}"
		ENDIF
	ENDIF
NEXT
