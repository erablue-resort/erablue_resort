
@BATTLE_MAIN_LOOP
#DIM 行動対象
#DIM 探索口上キャラ番号

;戦闘メイン処理
ダンジョン表示モード = 戦闘画面
エネミー画像ボタン化フラグ = 0
キャラ画像ボタン化フラグ = 0
アイテム使用済みフラグ = 0
ターン中奥義回数保存 = 0
兵装使用済みフラグ = 0
VARSET チェンバ基準キャラ保存, -1
行動口上呼び出し用文字列 = 
サイド描画_戦闘ログ保存 = 
サイド描画縦スクロール保存 = 0
アビテンプレート用_味方全滅フラグ = 0
アビテンプレート用_敵全滅フラグ = 0
特殊反応フラグ = 0
CALL 反応系変数リセット()
現在ターン数 = 1
SIF 戦闘背景画像 == ""
	戦闘背景画像 = %ダンジョン背景画像%
;画像リソースを全解放して顔グラ再生成
FOR LOCAL, 0, 14
	CALL 変身処理キャラ(BATTLE_STATE:LOCAL:キャラ登録番号, "バトル")
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	IF BATTLE_STATE:LOCAL:奥義ゲージ >= 100
		探索中顔グラキー:LOCAL = 奥義ゲージMAX
	ELSE
		探索中顔グラキー:LOCAL = 通常時
	ENDIF
	CALL 探索中顔グラ保存_セット(LOCAL)
NEXT
CALL 探索用顔グラフィック生成
;敵の登録
CALL 戦闘初期処理_敵

戦闘行動キャラ = -1
戦闘行動対象 = -1
戦闘行動内容 = -1
VARSET LOCAL
CALL アビテンプレ変数リセット

CALL 口上変数初期化()
KSTR:(K++) = 　
KSTR:(K++) = 　
KSTR:(K++) = 　
KSTR:(K++) = 　　　　　　　　　　　　　　　　　　　　　　　　　READY
CALL メッセージ欄表示用関数()

VARSET 戦闘中カウント:0:0
VARSET 行動種別フラグ:0:0
CALL 戦闘開始時処理関数()
CALL 反応行動処理関数()
SIF RESULT
	GOTO 戦闘終了処理


$戦闘_LOOP
CALL 口上変数初期化()
戦闘行動キャラ = -1
戦闘行動対象 = -1
戦闘行動内容 = -1
VARSET LOCAL
CALL アビテンプレ変数リセット

;行動順の判定
CALL 行動順決定

;行動前発動処理
;魅了など
CALL 行動前発動効果処理()
CALL 反応行動処理関数()
SIF RESULT
	GOTO 戦闘終了処理

IF 行動不能フラグ
	;行動不能なのでスキップして行動後処理へ
	IF 戦闘行動キャラ < 10
		BATTLE_STATE:戦闘行動キャラ:行動済みフラグ = 1
	ELSE
		敵BATTLE_STATE:(戦闘行動キャラ - 10):行動済みフラグ = 1
	ENDIF
ELSEIF 戦闘行動キャラ < 10
	IF アビテンプレート用_味方全滅フラグ || アビテンプレート用_敵全滅フラグ
		GOTO 戦闘終了処理
	ENDIF
	$行動入力_LOOP
	行動口上呼び出し用文字列 = 
	CALL 行動内容入力
	IF RESULT == -2
		;逃走時
		FOR LOCAL, 0, 4
			IF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
				BREAK
			ENDIF
		NEXT
		探索口上キャラ番号 = (BATTLE_STATE:(RAND:LOCAL):キャラ登録番号)
		TRYCALLFORM KOJO_DUNGEON_逃走時_{NO:探索口上キャラ番号}(探索口上キャラ番号)
		CALL 口上変数初期化
		KSTR:(K++) = 君たちは逃走した……
		CALL メッセージ欄表示用関数()
		探索中全体カウント:累積逃走数 += 1
		CALL 戦闘終了時処理
		RETURN -1
	ELSEIF RESULT == -999
		;何かしらが原因でエラーに入ってるのでLOOPに戻す
		GOTO 戦闘_LOOP
	ENDIF
	IF アビテンプレート用_味方全滅フラグ || アビテンプレート用_敵全滅フラグ
		GOTO 戦闘終了処理
	ENDIF
	;行動対象に入ってる数値は10+した状態なので注意
	CALL 戦闘行動実処理関数
	IF RESULT == -1
		CALL アビテンプレ変数リセット
		GOTO 行動入力_LOOP
	ENDIF
	IF アビテンプレート用_味方全滅フラグ || アビテンプレート用_敵全滅フラグ
		GOTO 戦闘終了処理
	ENDIF
	IF 戦闘行動キャラ == 9
		戦闘行動キャラ = 戦闘行動キャラ_一時保存
		CALL アビテンプレ変数リセット
		GOTO 行動入力_LOOP
	ENDIF
ELSE
	;10以上の数値が入ってるとエネミーの行動
	;CALL 敵行動決定
	$エネミー行動_LOOP
	上メニュー操作許可フラグ = 0
	CALL 画面再描画
	CALL 敵戦闘行動実処理関数
ENDIF

CALL 行動直後発動効果処理()
CALL 反応行動処理関数()
SIF RESULT
	GOTO 戦闘終了処理

;交代バフの処理
CALL 戦闘中交代効果処理()
IF RESULT == 1
	CALL 反応行動処理関数()
	SIF RESULT
		GOTO 戦闘終了処理
ENDIF

;行動消費なし時はここで戻す
IF アビテンプレート用_行動消費無しフラグ
	CALL アビテンプレ変数リセット
	IF 戦闘行動キャラ < 10
		GOTO 行動入力_LOOP
	ELSE
		GOTO エネミー行動_LOOP
	ENDIF
ENDIF

;行動後発動処理
;毒や再生など
CALL 行動後発動効果処理()
CALL 反応行動処理関数()
SIF RESULT
	GOTO 戦闘終了処理

IF 戦闘行動キャラ < 10
	IF BATTLE_STATE:戦闘行動キャラ:奥義ゲージ >= 100
		探索中顔グラキー:戦闘行動キャラ = 奥義ゲージMAX
	ELSE
		探索中顔グラキー:戦闘行動キャラ = 通常時
	ENDIF
ENDIF
CALL 探索用顔グラフィック生成()

$戦闘終了処理
VARSET LOCAL
FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:行動済みフラグ <= 0
		LOCAL:3 = 1
	LOCAL:1 = 1
NEXT

FOR LOCAL, 0, 10
	SIF 敵BATTLE_STATE_STR:LOCAL:エネミー名 == ""
		CONTINUE
	SIF 敵BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	SIF 敵BATTLE_STATE:LOCAL:行動済みフラグ <= 0
		LOCAL:3 = 1
	LOCAL:2 = 1
NEXT

IF !LOCAL:2
	CALL 戦闘勝利時処理()
	RETURN 0
ELSEIF !LOCAL:1
	CALL 全滅時処理()
	RETURN 1
ELSEIF LOCAL:3 == 0
	;ターン数を増やして最初から行動
	戦闘行動内容 = -1
	CALL ターン切り替え処理()
	IF RESULT
		GOTO 戦闘終了処理
	ENDIF
ENDIF

GOTO 戦闘_LOOP


@画面再描画
REDRAW 0
FOR LOCAL, 0, 10
	PRINTL
NEXT
DRAWLINE
;CALL 探索用顔グラフィック生成
SELECTCASE ダンジョン表示モード
	CASE "戦闘画面"
		IF OPTION変数:サイド領域非表示 == 0
			CALL サイド領域描画_戦闘中
		ENDIF
		CALL 汎用戦闘情報表示_上側
		CALL BATTLE_エネミー描画
		CALL DUNGEON_キャラ描画
		;メッセージ欄の顔グラもここで登録
		CALL ダンジョンメッセージ欄表示("下", 表示顔グラ対象番号_下)
		CALL ダンジョンメッセージ欄表示("上", 表示顔グラ対象番号_上)
		CALL 戦闘画像表示部分
	CASE "マップ画面"
		IF OPTION変数:サイド領域非表示 == 0
			CALL サイド領域描画_ダンジョン
		ENDIF
		SIF ダンジョン名 != ""
			CALL DUNGEON_MAP描画
		CALL DUNGEON_キャラ描画
		;メッセージ欄の顔グラもここで登録
		CALL ダンジョンメッセージ欄表示("下", 表示顔グラ対象番号_下)
		CALL ダンジョン画像表示部分
	CASE "アイテム画面"
		PRINTL
		CALL DUNGEON_ITEM描画
		CALL DUNGEON_キャラ描画
		;メッセージ欄の顔グラもここで登録
		CALL ダンジョンメッセージ欄表示("下", 表示顔グラ対象番号_下)
		CALL ダンジョン画像表示部分
ENDSELECT

FOR LOCAL, 0, RESULT
	PRINTL
NEXT

REDRAW 1

@汎用戦闘情報表示_上側
VARSET LOCALS
表示顔グラ対象番号_上 = 0

LOCALS:0 = {現在ターン数}ターン目
LOCALS:1 = ------------------------------------------------------------------------------------------
IF 上メニュー操作許可フラグ
	IF アイテム使用済みフラグ <= 0
		LOCALS:2 = <button value='1000'>[1000]アイテムを使う</button>　
	ELSE
		LOCALS:2 = <nonbutton><font color='#666666'>[1000]アイテムを使う</font></nonbutton>　
	ENDIF
	IF 兵装使用済みフラグ == 0 && 装備乗機ID
		LOCALS:2 += "<button value='2000'>[2000]兵装を使う</button>　"
	ELSE
		LOCALS:2 += "<nonbutton><font color='#666666'>[2000]兵装を使う</font></nonbutton>　"
	ENDIF
	LOCALS:2 +="<button value='1001'>[1001]逃げる</button>　"
	IF アビ使用確認スキップフラグ == 0
		LOCALS:3 +="<button value='1002'>[1002]アビ使用確認:ON</button>　"
	ELSE
		LOCALS:3 +="<button value='1002'>[1002]アビ使用確認:SKIP</button>　"
	ENDIF
	IF 奥義使用確認スキップフラグ == 0
		LOCALS:3 +="<button value='1003'>[1003]奥義使用確認:ON</button>　"
	ELSE
		LOCALS:3 +="<button value='1003'>[1003]奥義使用確認:SKIP</button>　"
	ENDIF
	IF クイック行動フラグ == 0
		LOCALS:3 +="<button value='1004'>[1004]クイック通常攻撃:OFF</button>　"
	ELSE
		LOCALS:3 +="<button value='1004'>[1004]クイック通常攻撃:ON</button>　"
	ENDIF
	SELECTCASE カットイン演出一括表示フラグ
		CASE 1
			LOCALS:3 +="<button value='1005'>[1005]全体カットイン設定:非表示</button>　"
		CASE 2
			LOCALS:3 +="<button value='1005'>[1005]全体カットイン設定:一日一回</button>　"
		CASEELSE
			LOCALS:3 +="<button value='1005'>[1005]全体カットイン設定:表示</button>　"
	ENDSELECT
ENDIF
IF 展開中フィールド名格納 != ""
	LOCALS:4 = <button value='1010'>フィールド：「%展開中フィールド名格納%」展開中</button>
ENDIF

FOR LOCAL:1, 0, 6
	LOCALS:10 += LOCALS:(LOCAL:1)
	LOCALS:10 += "<br>"
NEXT
TSTR:メッセージ欄文字列受け渡し_上側 = <div rect='281,62,5662,1687'>%LOCALS:10%</div>




@行動順決定
#DIM ループ用
#DIM 行動速度保存
#DIM バフ込み行動速度
;全員の比較
行動速度保存 = 0

FOR ループ用, 0, 4
	SIF BATTLE_STATE:ループ用:キャラ登録番号 < 1
		CONTINUE
	SIF BATTLE_STATE:ループ用:行動済みフラグ > 0
		CONTINUE
	SIF BATTLE_STATE:ループ用:ＨＰ < 1
		CONTINUE
	CALL バフ・デバフ測定(ループ用, "行動速度")
	バフ込み行動速度 = RESULT
	IF バフ込み行動速度 > 行動速度保存
		行動速度保存 = バフ込み行動速度
		戦闘行動キャラ = ループ用
	ENDIF
NEXT

FOR ループ用, 0, 10
	SIF 敵BATTLE_STATE_STR:ループ用:エネミー名 == ""
		CONTINUE
	SIF 敵BATTLE_STATE:ループ用:行動済みフラグ > 0
		CONTINUE
	SIF 敵BATTLE_STATE:ループ用:ＨＰ < 1
		CONTINUE
	CALL バフ・デバフ測定(ループ用 + 10, "行動速度")
	バフ込み行動速度 = RESULT
	IF バフ込み行動速度 > 行動速度保存
		行動速度保存 = バフ込み行動速度
		戦闘行動キャラ = ループ用 + 10
	ENDIF
NEXT

;戦闘行動キャラの行動前クリティカル回数を記録する
IF 戦闘行動キャラ < 10
	戦闘中カウント:戦闘行動キャラ:行動前クリティカル回数 = 戦闘中カウント:戦闘行動キャラ:クリティカル回数
ENDIF


@奥義ゲージリセット

FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	BATTLE_STATE:LOCAL:奥義ゲージ = 0
NEXT

@戦闘初期処理_味方(初期設定フラグ = 0)
#DIM 初期設定フラグ
#DIM 表示兵装数
#DIM 兵装番号


;キャラ追加
FOR LOCAL, 0, 14
	IF LOCAL > 3 && LOCAL < 10
		CONTINUE
	ENDIF

	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE

	;キャラ番号だけは変動しないので入れない
	BATTLE_STATE:LOCAL:Lv = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):Lv
	BATTLE_STATE:LOCAL:最大ＨＰ = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＨＰ + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＨＰ
	BATTLE_STATE:LOCAL:最大ＭＰ = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＭＰ + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):最大ＭＰ
	IF 初期設定フラグ
		BATTLE_STATE:LOCAL:ＨＰ = BATTLE_STATE:LOCAL:最大ＨＰ
		BATTLE_STATE:LOCAL:ＭＰ = BATTLE_STATE:LOCAL:最大ＭＰ
		BATTLE_STATE:LOCAL:奥義ゲージ = 0
	ENDIF
	BATTLE_STATE:LOCAL:攻撃力 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):攻撃力 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):攻撃力
	BATTLE_STATE:LOCAL:防御力 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):防御力 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):防御力
	BATTLE_STATE:LOCAL:回復力 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):回復力 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):回復力
	BATTLE_STATE:LOCAL:行動速度 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):行動速度 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):行動速度
	SIF BATTLE_STATE:LOCAL:行動速度 <= 0
		BATTLE_STATE:LOCAL:行動速度 = 1
	BATTLE_STATE:LOCAL:DA率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):DA率 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):DA率
	BATTLE_STATE:LOCAL:TA率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):TA率 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):TA率
	BATTLE_STATE:LOCAL:ゲージ上昇効率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ上昇効率 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ上昇効率
	BATTLE_STATE:LOCAL:ゲージ上昇効率_被ダメ時 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ上昇効率_被ダメ時 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ上昇効率_被ダメ時
	BATTLE_STATE:LOCAL:ゲージ最大値 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ最大値 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):ゲージ最大値
	BATTLE_STATE:LOCAL:命中率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):命中率 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):命中率
	BATTLE_STATE:LOCAL:回避率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):回避率 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):回避率
	BATTLE_STATE:LOCAL:属性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):属性
	IF 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):属性
		;0を火属性にしちゃったので数値そのままだと属性変更してるかどうか判別がつかないため、装備による属性変更は属性番号+10で保存している
		BATTLE_STATE:LOCAL:属性 = 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):属性 - 10
	ENDIF
	BATTLE_STATE:LOCAL:得意武器 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):得意武器
	BATTLE_STATE:LOCAL:クリティカル率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):クリティカル率
	BATTLE_STATE:LOCAL:クリティカルダメージ率 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):クリティカルダメージ率
	BATTLE_STATE:LOCAL:敵対心 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):敵対心
	BATTLE_STATE:LOCAL:行動済みフラグ = 0

	BATTLE_STATE:LOCAL:火耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):火耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):火耐性
	BATTLE_STATE:LOCAL:水耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):水耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):水耐性
	BATTLE_STATE:LOCAL:風耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):風耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):風耐性
	BATTLE_STATE:LOCAL:土耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):土耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):土耐性
	BATTLE_STATE:LOCAL:光耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):光耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):光耐性
	BATTLE_STATE:LOCAL:闇耐性 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):闇耐性 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):闇耐性
	BATTLE_STATE:LOCAL:火強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):火強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):火強化
	BATTLE_STATE:LOCAL:水強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):水強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):水強化
	BATTLE_STATE:LOCAL:風強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):風強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):風強化
	BATTLE_STATE:LOCAL:土強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):土強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):土強化
	BATTLE_STATE:LOCAL:光強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):光強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):光強化
	BATTLE_STATE:LOCAL:闇強化 = 基礎BATTLE_STATE:(BATTLE_STATE:LOCAL:キャラ登録番号):闇強化 + 装備ステータス補正保存:(BATTLE_STATE:LOCAL:キャラ登録番号):闇強化

	;初期設定時は衣装を探索時衣装に変更
	CALL CLOTHES_RESET(BATTLE_STATE:LOCAL:キャラ登録番号)
	CALL CLOTHES_RESET_TRAIN(BATTLE_STATE:LOCAL:キャラ登録番号)
NEXT

;乗機装備時、９にPLAYERのステータスを入れる
BATTLE_STATE:9:キャラ登録番号 = PLAYER
BATTLE_STATE:9:攻撃力 = DT_CELL_GET("所持乗機データベース", 装備乗機ID, "乗機攻撃力", 1)
BATTLE_STATE:9:命中率 = DT_CELL_GET("所持乗機データベース", 装備乗機ID, "乗機命中率", 1)
SIF BATTLE_STATE:9:攻撃力 < 1
	BATTLE_STATE:9:攻撃力 = 100
SIF BATTLE_STATE:9:命中率 < 1
	BATTLE_STATE:9:命中率 = 100
BATTLE_STATE:9:クリティカルダメージ率 = 150

;初期設定時に残弾のリセット
IF 初期設定フラグ
	VARSET 乗機残弾種別
	VARSET 乗機残弾数
	表示兵装数 = ENUMFUNCBEGINSWITH(@"乗機兵装関数_%DT_CELL_GETS("所持乗機データベース", 装備乗機ID, "乗機名", 1)%_")
	FOR LOCAL, 0, 表示兵装数
		兵装番号 = TOINT(REPLACE(RESULTS:LOCAL, @"乗機兵装関数_%DT_CELL_GETS("所持乗機データベース", 装備乗機ID, "乗機名", 1)%_", ""))
		IF ISNUMERIC(DT_CELL_GETS("所持乗機データベース", 装備乗機ID, @"武装{兵装番号}", 1))
			CALLFORM %RESULTS:LOCAL%("残弾セット", TOINT(DT_CELL_GETS("所持乗機データベース", 装備乗機ID, @"武装{兵装番号}", 1)))
		ELSE
			CALLFORM %RESULTS:LOCAL%("残弾セット")
		ENDIF
		IF 乗機残弾種別:兵装番号 == 2
			;CT制の時は残CTを0にセット
			乗機残弾数:兵装番号 = 0
		ENDIF
	NEXT
ENDIF


@戦闘初期処理_敵
FOR LOCAL, 0, 10
	SIF 敵BATTLE_STATE_STR:LOCAL:エネミー名 == ""
		CONTINUE
	IF 敵BATTLE_STATE_STR:LOCAL:エネミー関数キー == ""
		CALL エネミー初期化処理(LOCAL)
	ENDIF
	IF 敵BATTLE_STATE:LOCAL:ボスフラグ && LOCAL % 2 == 0 && LOCAL < 8
		敵BATTLE_STATE_STR:(LOCAL + 1):エネミー名 '= ""
		敵BATTLE_STATE_STR:(LOCAL + 2):エネミー名 '= ""
		敵BATTLE_STATE_STR:(LOCAL + 3):エネミー名 '= ""
		LOCAL += 3
	ENDIF
NEXT


@エネミー初期化処理(敵番号)
#DIM 敵番号

敵BATTLE_STATE_STR:敵番号:エネミー関数キー '= 敵BATTLE_STATE_STR:敵番号:エネミー名
CALLFORM 敵BATTLE_STATE_%敵BATTLE_STATE_STR:敵番号:エネミー関数キー%(敵番号)
SIF 敵BATTLE_STATE:敵番号:行動速度 <= 0
	敵BATTLE_STATE:敵番号:行動速度 = 1
SIF 敵BATTLE_STATE:敵番号:ランダムエネミーフラグ
	CALL 敵レベルアップ_テンプレート適用(敵番号, 敵BATTLE_STATE:敵番号:ランダムエネミーフラグ)
SIF 敵BATTLE_STATE:敵番号:クリティカルダメージ率 == 0
	敵BATTLE_STATE:敵番号:クリティカルダメージ率 = 150
SIF 敵BATTLE_STATE:敵番号:敵対心 == 0
	敵BATTLE_STATE:敵番号:敵対心 = 100
敵BATTLE_STATE:敵番号:行動済みフラグ = 0
敵BATTLE_STATE:敵番号:チャージターン = 0


@エネミーリセット処理(敵番号)
#DIM 敵番号
#DIM ループ用

FOR ループ用, 0, VARSIZE("敵BATTLE_STATE", 2)
	敵BATTLE_STATE:敵番号:ループ用 = 0
NEXT
FOR ループ用, 0, VARSIZE("敵BATTLE_STATE_STR", 2)
	敵BATTLE_STATE_STR:敵番号:ループ用 '= ""
NEXT


@ターン切り替え処理
#DIM 表示兵装数
#DIM 兵装番号

;チェインバースト処理
IF ターン中奥義回数保存 > 1
	口上用技名保存 = チェインバースト
	TRYCALLFORM KOJO_DUNGEON_チェンバ発動時_{NO:(BATTLE_STATE:(チェンバ基準キャラ保存:0):キャラ登録番号)}(BATTLE_STATE:(チェンバ基準キャラ保存:0):キャラ登録番号)
	CALL アビテンプレ変数リセット
	
	;2回以上奥義を撃っていた場合、敵全体にダメージ
	戦闘行動キャラ = チェンバ基準キャラ保存:0
	CALL バフ込み数値算出("攻撃力")
	LOCAL = RESULT
	LOCALS = 攻撃力
	CALL バフ込み数値算出("防御力")
	IF LOCAL < RESULT
		LOCAL = RESULT
		LOCALS = 防御力
	ENDIF
	CALL バフ込み数値算出("回復力")
	IF LOCAL < RESULT
		LOCAL = RESULT
		LOCALS = 回復力
	ENDIF
	CALL アビ対象選択テンプレート_敵全体_生者のみ
	アビ汎用文字列:ダメージ種類 = チェンバダメージ
	アビ汎用文字列:攻撃側使用能力値 = %LOCALS%
	アビ汎用文字列:実行時メッセージ１ = %CALLNAME:(BATTLE_STATE:(チェンバ基準キャラ保存:0):キャラ登録番号)%たちが放った奥義の魔力が形を成し、敵に襲いかかる！
	SELECTCASE ターン中奥義回数保存
		CASE 2
			アビ汎用変数:効果割合 = 100
			アビ汎用文字列:実行時メッセージ２ = チェインバースト！　
			SELECTCASE BATTLE_STATE:戦闘行動キャラ:属性
				CASE 0
					アビ汎用文字列:実行時メッセージ２ += "レッドデトネーション！！"
				CASE 1
					アビ汎用文字列:実行時メッセージ２ += "ブルーデトネーション！！"
				CASE 2
					アビ汎用文字列:実行時メッセージ２ += "エアロデトネーション！！"
				CASE 3
					アビ汎用文字列:実行時メッセージ２ += "アースデトネーション！！"
				CASE 4
					アビ汎用文字列:実行時メッセージ２ += "アークデトネーション！！"
				CASE 5
					アビ汎用文字列:実行時メッセージ２ += "カオスデトネーション！！"
			ENDSELECT
		CASE 3
			アビ汎用変数:効果割合 = 150
			アビ汎用文字列:実行時メッセージ２ = チェインバースト！　
			SELECTCASE BATTLE_STATE:戦闘行動キャラ:属性
				CASE 0
					アビ汎用文字列:実行時メッセージ２ += "紅蓮のコラプション！！"
				CASE 1
					アビ汎用文字列:実行時メッセージ２ += "霧氷のイルミネート！！"
				CASE 2
					アビ汎用文字列:実行時メッセージ２ += "乱壊のテンペスト！！"
				CASE 3
					アビ汎用文字列:実行時メッセージ２ += "地絶のパルヴァライズ！！"
				CASE 4
					アビ汎用文字列:実行時メッセージ２ += "雷電のエラディケート！！"
				CASE 5
					アビ汎用文字列:実行時メッセージ２ += "奈落のフォールダウン！！"
			ENDSELECT
		CASEELSE
			アビ汎用変数:効果割合 = 200 + ターン中奥義回数保存 * 10
			アビ汎用文字列:実行時メッセージ２ = フルチェイン！　
			SELECTCASE BATTLE_STATE:戦闘行動キャラ:属性
				CASE 0
					アビ汎用文字列:実行時メッセージ２ += "プロミネンスフレア！！"
				CASE 1
					アビ汎用文字列:実行時メッセージ２ += "アブソリュート・ゼロ！！"
				CASE 2
					アビ汎用文字列:実行時メッセージ２ += "バーストゲイル！！"
				CASE 3
					アビ汎用文字列:実行時メッセージ２ += "ディアストロフィズム！！"
				CASE 4
					アビ汎用文字列:実行時メッセージ２ += "アセンション！！"
				CASE 5
					アビ汎用文字列:実行時メッセージ２ += "ケイオスタイド！！"
			ENDSELECT
	ENDSELECT
	SETBIT アビ汎用変数:かばう無視オプション, 0
	SETBIT アビ汎用変数:かばう無視オプション, 1
	アビ汎用変数:命中率補正値 = 200
	CALL アビテンプレート_ダメージ処理_自属性

	CALL カットイン呼出("チェインバースト")
	IF RESULT != -1
		WAIT
		CALL カットイン終了
	ENDIF
	CALL アビテンプレート用_表示メッセージ変換処理
	CALL メッセージ欄表示用関数(,,,0)
	CALL 口上変数初期化

	;トドメ口上
	IF 口上用トドメフラグ
		TRYCALLFORM KOJO_DUNGEON_トドメ時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
	ENDIF
	口上用技名保存 = 
	口上用トドメフラグ = 0
	
	;敵全滅チェック
	VARSET LOCAL
	FOR LOCAL, 0, 10
		SIF 敵BATTLE_STATE_STR:LOCAL:エネミー名 == ""
			CONTINUE
		SIF 敵BATTLE_STATE:LOCAL:ＨＰ < 1
			CONTINUE
		LOCAL:2 = 1
	NEXT
	;全滅シてる時、１を返す
	SIF !LOCAL:2
		RETURN 1
ENDIF

CALL ターン終了時処理関数
;敵味方のどちらかが全滅した場合、１が帰ってくる
SIF RESULT
	RETURN 1

;行動済みフラグの解消
FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	BATTLE_STATE:LOCAL:行動済みフラグ = 0
NEXT

FOR LOCAL, 0, 10
	SIF 敵BATTLE_STATE_STR:LOCAL:エネミー名 == ""
		CONTINUE
	SIF 敵BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	敵BATTLE_STATE:LOCAL:行動済みフラグ = 0
NEXT

;バフ、デバフのターン経過処理
CALL 戦闘効果ターン経過処理()

;乗機のCT進行
表示兵装数 = ENUMFUNCBEGINSWITH(@"乗機兵装関数_%DT_CELL_GETS("所持乗機データベース", 装備乗機ID, "乗機名", 1)%_")
FOR LOCAL, 0, 表示兵装数
	兵装番号 = TOINT(REPLACE(RESULTS:LOCAL, @"乗機兵装関数_%DT_CELL_GETS("所持乗機データベース", 装備乗機ID, "乗機名", 1)%_", ""))
	IF 乗機残弾種別:兵装番号 == 2
		;CT制の時は残CTを１減らす
		乗機残弾数:兵装番号 = MAX(0, 乗機残弾数:兵装番号 - 1)
	ENDIF
NEXT

;各種変数の更新
現在ターン数 += 1
アイテム使用済みフラグ = 0
兵装使用済みフラグ = 0
ターン中奥義回数保存 = 0
VARSET チェンバ基準キャラ保存, -1
VARSET 行動種別フラグ:0:0

;ターン切り替わり時に顔グラ再生成
FOR LOCAL, 0, 14
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	IF BATTLE_STATE:LOCAL:奥義ゲージ >= 100
		探索中顔グラキー:LOCAL = 奥義ゲージMAX
	ELSE
		探索中顔グラキー:LOCAL = 通常時
	ENDIF
	CALL 探索中顔グラ保存_セット(LOCAL)
NEXT
CALL 探索用顔グラフィック生成

CALL ターン開始時処理関数
;敵味方のどちらかが全滅した場合、１が帰ってくる
SIF RESULT
	RETURN 1


@全滅チェック
#DIM 生存チェック_味方
#DIM 生存チェック_敵
#DIM ループ用

生存チェック_味方 = 0
生存チェック_敵 = 0

FOR ループ用, 0, 4
	SIF BATTLE_STATE:ループ用:キャラ登録番号 < 1
		CONTINUE
	SIF BATTLE_STATE:ループ用:ＨＰ < 1
		CONTINUE
	生存チェック_味方 = 1
NEXT
SIF 生存チェック_味方 == 0
	アビテンプレート用_味方全滅フラグ = 1

FOR ループ用, 0, 10
	SIF 敵BATTLE_STATE_STR:ループ用:エネミー名 == ""
		CONTINUE
	SIF 敵BATTLE_STATE:ループ用:ＨＰ < 1
		CONTINUE
	生存チェック_敵 = 1
NEXT
SIF 生存チェック_敵 == 0
	アビテンプレート用_敵全滅フラグ = 1


@行動後発動効果処理
#DIM 効果量
#DIM ループ用
#DIM データベース行数
#DIM ループ終了
#DIM 呪いフラグ
#DIM ダメージデバフフラグ
#DIMS キャラNAME

CALL 口上変数初期化
行動不能フラグ = 0
ループ終了 = 0

;毒処理
FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
	ダメージデバフフラグ = 0
	SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "毒", 戦闘行動キャラ)
		ダメージデバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "火傷", 戦闘行動キャラ)
		ダメージデバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "氷結", 戦闘行動キャラ)
		ダメージデバフフラグ = 1
	SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "自傷", 戦闘行動キャラ)
		ダメージデバフフラグ = 1
	IF ダメージデバフフラグ
		IF 戦闘行動キャラ < 10
			キャラNAME '= CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)
			;ダメージ量決定
			効果量 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値") + (BATTLE_STATE:戦闘行動キャラ:最大ＨＰ * DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合") / 100)
			効果量 = 効果量 * RAND(95, 105) / 100
			効果量 = MIN(効果量, BATTLE_STATE:戦闘行動キャラ:ＨＰ)
			WSTR:(K++) = %キャラNAME%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のダメージ！
			BATTLE_STATE:戦闘行動キャラ:ＨＰ = MAX(BATTLE_STATE:戦闘行動キャラ:ＨＰ - 効果量, 0)
			IF BATTLE_STATE:戦闘行動キャラ:ＨＰ < 1
				WSTR:(K++) = %キャラNAME%は倒れた！
				CALL 戦闘不能者登録(戦闘行動キャラ, -1)
				ループ終了 = 1
			ENDIF
		ELSE
			キャラNAME '= 敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名
			;ダメージ量決定
			効果量 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値") + (敵BATTLE_STATE:(戦闘行動キャラ - 10):最大ＨＰ * DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合") / 100)
			効果量 = 効果量 * RAND(95, 105) / 100
			効果量 = MIN(効果量, 敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ)
			WSTR:(K++) = %キャラNAME%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のダメージ！
			敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ = MAX(敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ - 効果量, 0)
			IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ < 1
				WSTR:(K++) = %キャラNAME%は倒れた！
				CALL 戦闘不能者登録(戦闘行動キャラ, -1)
				ループ終了 = 1
			ENDIF
		ENDIF
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		SIF ループ終了
			BREAK
	ENDIF

	IF 戦闘行動キャラ < 10
		ダメージデバフフラグ = 0
		SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "消耗", 戦闘行動キャラ)
			ダメージデバフフラグ = 1
		SIF バフ・デバフ効果適用判定_行指定(ループ用, "デバフ", "ＭＰ自傷", 戦闘行動キャラ)
			ダメージデバフフラグ = 1
		IF ダメージデバフフラグ
			;ダメージ量決定
			効果量 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値") + (BATTLE_STATE:戦闘行動キャラ:最大ＭＰ * DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合") / 100)
			効果量 = 効果量 * RAND(95, 105) / 100
			効果量 = MIN(効果量, BATTLE_STATE:戦闘行動キャラ:ＭＰ)
			WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果でＭＰが{効果量}減少！
			BATTLE_STATE:戦闘行動キャラ:ＭＰ = MAX(BATTLE_STATE:戦闘行動キャラ:ＭＰ - 効果量, 0)
			CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
		ENDIF
	ENDIF
NEXT
;回数消費
CALL デバフ回数経過処理(戦闘行動キャラ, "毒")
CALL デバフ回数経過処理(戦闘行動キャラ, "火傷")
CALL デバフ回数経過処理(戦闘行動キャラ, "氷結")
CALL デバフ回数経過処理(戦闘行動キャラ, "自傷")
CALL デバフ回数経過処理(戦闘行動キャラ, "消耗")
CALL デバフ回数経過処理(戦闘行動キャラ, "ＭＰ自傷")

ループ終了 = 0

;再生・高揚処理
FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
	IF バフ・デバフ効果適用判定_行指定(ループ用, "バフ", "再生", 戦闘行動キャラ)
		;回復量決定
		効果量 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値") + (BATTLE_STATE:戦闘行動キャラ:最大ＨＰ * DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合") / 100)
		効果量 = 効果量 * RAND(95, 105) / 100

		;呪い判定
		呪いフラグ = 0
		データベース行数 = デバフ番号取得("呪い", 戦闘行動キャラ)
		IF データベース行数 >= 0
			WSTR:(K++) = %DT_CELL_GETS("戦闘効果データベース", データベース行数, "効果名")%の効果で回復がダメージに転換される！
			効果量 = 効果量 * DT_CELL_GET("戦闘効果データベース", データベース行数, "効果量_割合") / 100
			SIF DT_CELL_GET("戦闘効果データベース", データベース行数, "効果量_固定値") > 0
				効果量 = MIN(効果量, DT_CELL_GET("戦闘効果データベース", データベース行数, "効果量_固定値"))
			呪いフラグ = 1
			CALL デバフ回数経過処理(戦闘行動キャラ, "呪い")
		ELSEIF 展開中フィールド名格納 != ""
			RESULTS '= ""
			TRYCCALLFORM 固有呪い補正_フィールド_%展開中フィールド名格納%(効果量)
				IF RESULTS == ""
					WSTR:(K++) = %展開中フィールド名格納%が回復をダメージに転換する！
				ELSE
					WSTR:(K++) = %RESULTS%
				ENDIF
				SIF RESULT > 0
					効果量 = RESULT
				呪いフラグ = 1
			CATCH
			ENDCATCH
		ENDIF
		IF 戦闘行動キャラ < 10
			IF 呪いフラグ
				WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のダメージ！
				BATTLE_STATE:戦闘行動キャラ:ＨＰ = MAX(BATTLE_STATE:戦闘行動キャラ:ＨＰ - 効果量, 0)
				IF BATTLE_STATE:戦闘行動キャラ:ＨＰ < 1
					WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%は倒れた！
					CALL 戦闘不能者登録(戦闘行動キャラ, -1)
					ループ終了 = 1
				ENDIF
			ELSE
				効果量 = MIN(効果量, BATTLE_STATE:戦闘行動キャラ:最大ＨＰ - BATTLE_STATE:戦闘行動キャラ:ＨＰ)
				IF デバフ番号取得("強圧", 戦闘行動キャラ) >= 0
					WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%のＨＰは回復しなかった…
					CALL デバフ回数経過処理(戦闘行動キャラ, "強圧")
				ELSE
					WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のＨＰを回復！
					BATTLE_STATE:戦闘行動キャラ:ＨＰ = MIN(BATTLE_STATE:戦闘行動キャラ:ＨＰ + 効果量, BATTLE_STATE:戦闘行動キャラ:最大ＨＰ)
				ENDIF
			ENDIF
		ELSE
			IF 呪いフラグ
				WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のダメージ！
				敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ = MAX(敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ - 効果量, 0)
				IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ < 1
					WSTR:(K++) = %(敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名)%は倒れた！
					CALL 戦闘不能者登録(戦闘行動キャラ, -1)
					ループ終了 = 1
				ENDIF
			ELSE
				効果量 = MIN(効果量, 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大ＨＰ - 敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ)
				IF デバフ番号取得("強圧", 戦闘行動キャラ) >= 0
					WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名%のＨＰは回復しなかった…
					CALL デバフ回数経過処理(戦闘行動キャラ, "強圧")
				ELSE
					WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名%は%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で{効果量}のＨＰを回復！
					敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ = MIN(敵BATTLE_STATE:(戦闘行動キャラ - 10):ＨＰ + 効果量, 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大ＨＰ)
				ENDIF
			ENDIF
		ENDIF
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		SIF ループ終了
			BREAK
	ELSEIF バフ・デバフ効果適用判定_行指定(ループ用, "バフ", "高揚", 戦闘行動キャラ) && 戦闘行動キャラ < 10
		;上昇量決定
		効果量 = DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_固定値") + (BATTLE_STATE:戦闘行動キャラ:奥義ゲージ * DT_CELL_GET("戦闘効果データベース", ループ用, "効果量_割合") / 100)
		効果量 = 効果量 * RAND(95, 105) / 100
		効果量 = MIN(効果量, BATTLE_STATE:戦闘行動キャラ:ゲージ最大値 - BATTLE_STATE:戦闘行動キャラ:奥義ゲージ)
		IF デバフ番号取得("恐怖", 戦闘行動キャラ) >= 0
			WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%の奥義ゲージは上昇しなかった…
			CALL デバフ回数経過処理(戦闘行動キャラ, "恐怖")
		ELSE
			WSTR:(K++) =%DT_CELL_GETS("戦闘効果データベース", ループ用, "効果名")%の効果で%CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)%の奥義ゲージが{効果量}上昇！
			BATTLE_STATE:戦闘行動キャラ:奥義ゲージ = MIN(BATTLE_STATE:戦闘行動キャラ:奥義ゲージ + 効果量, BATTLE_STATE:戦闘行動キャラ:ゲージ最大値)
		ENDIF
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
	ENDIF
NEXT
;回数消費
CALL バフ回数経過処理(戦闘行動キャラ, "再生")
CALL バフ回数経過処理(戦闘行動キャラ, "高揚")

;行動回数持続の効果の回数を減少
CALL バフ行動回数経過処理(戦闘行動キャラ)
CALL デバフ行動回数経過処理(戦闘行動キャラ)


;0 = 交代は実行されなかった, 1 = 交代が実行された, -1 = 交代に失敗した/キャンセルされた
@戦闘中交代効果処理
#DIM ループ用
#DIM データベース行数
#DIM 交代実行結果

CALL 口上変数初期化
交代実行結果 = 0

FOR ループ用, 0, DT_ROW_LENGTH("戦闘効果データベース")
	データベース行数 = DT_CELL_GET("戦闘効果データベース", ループ用, "id")
	SIF データベース行数 == 0
		BREAK

	SIF DT_CELL_GETS("戦闘効果データベース", データベース行数, "バフ・デバフフラグ", 1) != "バフ"
		CONTINUE
	SIF DT_CELL_GETS("戦闘効果データベース", データベース行数, "対象能力", 1) != "交代"
		CONTINUE
	;最初の１つのみ処理する
	IF 交代実行結果 == 0
		IF BATTLE_STATE:10:キャラ登録番号 > 0
			SELECTCASE DT_CELL_GETS("戦闘効果データベース", データベース行数, "適用範囲", 1)
				CASE "0"
					CALL サブメンバー交代処理_戦闘中(0, 0)
				CASE "1"
					CALL サブメンバー交代処理_戦闘中(0, 1)
				CASE "2"
					CALL サブメンバー交代処理_戦闘中(0, 2)
				CASE "3"
					CALL サブメンバー交代処理_戦闘中(0, 3)
				CASEELSE
					;味方全体を指定した場合、任意のメインメンバー1人をサブメンバーと交代する
					;おかしな範囲を指定した場合も同様
					CALL サブメンバー交代処理_戦闘中(0)
			ENDSELECT
			IF RESULT
				交代実行結果 = 1
			ELSE
				交代実行結果 = -1
			ENDIF
		ELSE
			PRINTW サブメンバーが搭乗していないため、交代できません
			交代実行結果 = -1
		ENDIF
	ENDIF
	;キャンセルにしろ交代を実行したにしろ、交代バフは消す
	DT_ROW_REMOVE "戦闘効果データベース", データベース行数
	ループ用 --
NEXT

RETURN 交代実行結果


;交代を実行した場合は0以外、キャンセルした場合は0を返す
;サブメンバーが存在しない場合のケアは関数の外でしなければならない点に注意
@サブメンバー交代処理_戦闘中(キャンセル可 = 1, メイン固定 = -1)
#DIM キャンセル可
#DIM メイン固定
#DIM 交代候補_メイン
#DIM 交代候補_サブ
#DIMS 描画用
#DIM INPUT保存
#DIM ループ用
#DIM 戦闘行動キャラ保存用

交代候補_メイン = -1
交代候補_サブ = -1

;全員分の画像を再生成
CALL 探索用顔グラフィック生成
CALL DUNGEON_キャラ描画

DO
	DRAWLINE
	IF メイン固定 == -1
		PRINT メインメンバー
	ELSE
		PRINTFORM %CALLNAME:(BATTLE_STATE:メイン固定:キャラ登録番号)%
	ENDIF
	IF キャンセル可
		PRINTL とサブメンバーを入れ替えることが出来ます。
	ELSE
		PRINTL とサブメンバーを入れ替えます。
	ENDIF
	IF メイン固定 == -1
		PRINTL 入れ替えたいキャラを左右それぞれで選んでください。
	ELSE
		PRINTL 入れ替えたいキャラを左から選んでください。
	ENDIF
	DRAWLINE
	;順番に並べる
	描画用 '= "<div rect='2887,1530, 500, 200'>←→</div>"
	FOR ループ用, 10, 14
		SIF BATTLE_STATE:ループ用:キャラ登録番号 < 1
			BREAK
		描画用 += @"<div rect='100, {(ループ用 - 10) * 790}, 2500, 5000'>"
		IF 交代候補_サブ == ループ用
			描画用 += @"<button value='{ループ用}' ><img src='キャラ_{ループ用}_ボタン' height='750' width='2462'></button>"
		ELSE
			描画用 += @"<button value='{ループ用}' ><img src='キャラ_{ループ用}' srcb='キャラ_{ループ用}_ボタン' height='750' width='2462'></button>"
		ENDIF
		描画用 += "</div>"
	NEXT
	IF メイン固定 == -1
		FOR ループ用, 0, 4
			SIF BATTLE_STATE:ループ用:キャラ登録番号 < 1
				BREAK
			描画用 += @"<div rect='3375,{ループ用 * 790}, 2500, 1000'>"
			IF 交代候補_メイン == ループ用
				描画用 += @"<button value='{ループ用}' ><img src='キャラ_{ループ用}_ボタン' height='750' width='2462'></button>"
			ELSE
				描画用 += @"<button value='{ループ用}' ><img src='キャラ_{ループ用}' srcb='キャラ_{ループ用}_ボタン' height='750' width='2462'></button>"
			ENDIF
			描画用 += "</div>"
		NEXT
	ELSE
		交代候補_メイン = メイン固定
		描画用 += @"<div rect='3375, 0, 2500, 1000'><img src='キャラ_{メイン固定}' height='750' width='2462'></div>"
	ENDIF
	HTML_PRINT 描画用
	FOR ループ用, 0, 29
		PRINTL
	NEXT
	SIF キャンセル可
		PRINTBUTTON "[999] 戻る", 999
	PRINTL
	PRINTL

	BINPUT
	INPUT保存 = RESULT
	SELECTCASE INPUT保存
		CASE 0 TO 3
			IF INPUT保存 != 交代候補_メイン
				交代候補_メイン = INPUT保存
			ELSE
				交代候補_メイン = -1
			ENDIF
		CASE 10 TO 13
			IF INPUT保存 != 交代候補_サブ
				交代候補_サブ = INPUT保存
			ELSE
				交代候補_サブ = -1
			ENDIF
		CASE 999
			RETURN 0
	ENDSELECT
LOOP !INRANGE(交代候補_メイン, 0, 3) || !INRANGE(交代候補_サブ, 10, 13)

;交代処理
FOR ループ用, 0, VARSIZE("BATTLE_STATE", 2)
	;行動済みフラグはそのまま
	SIF ループ用 == GETNUM(BATTLE_STATE, "行動済みフラグ", 2)
		CONTINUE
	SWAP BATTLE_STATE:交代候補_サブ:ループ用, BATTLE_STATE:交代候補_メイン:ループ用
NEXT
FOR ループ用, 0, VARSIZE("探索中カウント", 2)
	探索中カウント:交代候補_メイン:ループ用 += 戦闘中カウント:交代候補_メイン:ループ用
	戦闘中カウント:交代候補_メイン:ループ用 = 0
	SWAP 探索中カウント:交代候補_サブ:ループ用, 探索中カウント:交代候補_メイン:ループ用
NEXT

;メインメンバー特有の変数やデバフをリセット
FOR ループ用, 0, VARSIZE("行動種別フラグ", 2)
	行動種別フラグ:交代候補_メイン:ループ用 = 0
NEXT
ループ用 = FINDELEMENT(チェンバ基準キャラ保存, 交代候補_メイン)
WHILE ループ用 >= 0
	ARRAYSHIFT チェンバ基準キャラ保存, -1, -1, ループ用
	ターン中奥義回数保存 --
	ループ用 = FINDELEMENT(チェンバ基準キャラ保存, 交代候補_メイン)
WEND
;固有バフなどが残って変なことになりそうなので、仕方なく引き継がない
CALL 戦闘効果直接削除(交代候補_メイン, "ALL", "", "ALL")

PRINTFORMW %CALLNAME:(BATTLE_STATE:交代候補_サブ:キャラ登録番号)%と%CALLNAME:(BATTLE_STATE:交代候補_メイン:キャラ登録番号)%を交代しました。

;戦闘開始時のキャラ固有処理を行う
戦闘行動キャラ保存用 = 戦闘行動キャラ
戦闘行動キャラ = RESULT
CALL 口上変数初期化
CALL アビテンプレ変数リセット

;指輪を見る
TRYCCALLFORM 固有戦闘開始時処理_指輪_%DT_CELL_GETS("所持指輪データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備指輪番号, "指輪名", 1)%()
	;表示処理
	CALL アビテンプレート用_表示メッセージ変換処理
	SIF K > 0
		CALL メッセージ欄表示用関数(,,,0)
	CALL 口上変数初期化
	CALL アビテンプレ変数リセット
CATCH
ENDCATCH

;ジョブ証を見る
TRYCCALLFORM 固有戦闘開始時処理_ジョブ証_%DT_CELL_GETS("所持ジョブ証データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号):装備証番号, "ジョブ証名", 1)%()
	;表示処理
	CALL アビテンプレート用_表示メッセージ変換処理
	SIF K > 0
		CALL メッセージ欄表示用関数(,,,0)
	CALL 口上変数初期化
	CALL アビテンプレ変数リセット
CATCH
ENDCATCH

;キャラを見る
TRYCCALLFORM 固有戦闘開始時処理_キャラ_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ登録番号)}()
	;表示処理
	CALL アビテンプレート用_表示メッセージ変換処理
	SIF K > 0
		CALL メッセージ欄表示用関数(,,,0)
	CALL 口上変数初期化
	CALL アビテンプレ変数リセット
CATCH
ENDCATCH

戦闘行動キャラ = 戦闘行動キャラ保存用
CALL 探索用顔グラフィック生成()
RETURN 1


@イベント戦闘初期処理
;ダンジョン外での戦闘開始時に呼ぶ

CALL 戦闘初期処理_味方(1)

FOR LOCAL, 0, 14
	SIF LOCAL > 3 && LOCAL < 10
		CONTINUE
	SIF BATTLE_STATE:LOCAL:キャラ登録番号 < 1
		CONTINUE
	CALL 装備再計算処理(BATTLE_STATE:LOCAL:キャラ登録番号)
	TRYCALLFORM ダンジョン固有初期処理_{NO:(BATTLE_STATE:LOCAL:キャラ登録番号)}(BATTLE_STATE:LOCAL:キャラ登録番号)
NEXT


@反応系変数リセット()
VARSET 回避反応者, -1
VARSET 回避反応回数, -1
VARSET 回避反応対象, -1
VARSET 被タゲ反応者, -1
VARSET 被タゲ反応回数, -1
VARSET 被タゲ反応対象, -1
VARSET 被ダメ反応者, -1
VARSET 被ダメ反応回数, -1
VARSET 被ダメ反応対象, -1
VARSET 被ダメ時最大ダメ, -1
VARSET 被ダメ時総ダメ, -1
VARSET 戦闘不能反応者, -1
VARSET 戦闘不能反応対象, -1
